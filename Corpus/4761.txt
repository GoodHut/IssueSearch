 URL : "https://github.com/sirjuddington/SLADE/issues/700" TITLE : ftbfs on linux BODY : slade version : 3.1.2 alpha 08371f72 operating system : linux issue details : as of 08371f72, building slade failed with the following error from g++ on my system: 98% building cxx object src/cmakefiles/slade.dir/mapeditor/mapeditor.o /home/mormegil/src/doom/slade/src/mapeditor/mapeditor.cpp: in member function ‘void mapeditor::endmove bool ’: /home/mormegil/src/doom/slade/src/mapeditor/mapeditor.cpp:1965:23: error: taking address of temporary -fpermissive memset &move_verts 0 , 0, map.nvertices ; ^ src/cmakefiles/slade.dir/build.make:8449: recipe for target 'src/cmakefiles/slade.dir/mapeditor/mapeditor.o' failed make 2 : src/cmakefiles/slade.dir/mapeditor/mapeditor.o error 1 cmakefiles/makefile2:173: recipe for target 'src/cmakefiles/slade.dir/all' failed make 1 : src/cmakefiles/slade.dir/all error 2 makefile:117: recipe for target 'all' failed make: all error 2 the problem here is that unlike std::vector<literallyanythingelse> , the c++ standard says it's ok for it to be impossible to take the address of individual elements of a std::vector<bool> , if sacrificing the ability to do so allows you to implement std::vector<bool> in a more memory-efficient way. as such, the code sequence vector<bool> move_verts map.nvertices ; memset &move_verts 0 , 0, map.nvertices ; cannot be relied upon to work - and indeed, if you're using the gnu implementation of the c++ standard library, it doesn't . the cheap fix would be to use unsigned char instead of bool .