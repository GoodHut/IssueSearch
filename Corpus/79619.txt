 URL : "https://github.com/Barlog-M/spring-react-oauth2-jwt/issues/1" TITLE : some thoughts and review BODY : try to use kotlin-spring to eliminate open keyword usage. checkout here https://blog.jetbrains.com/kotlin/2016/12/kotlin-1-0-6-is-here/ rewrite if logic in forwardfilter to simplify understanding. like: if uri.startswithic arrayof /ui , /ui/js , /ui/css {} remove @autowired from constructor di e.g. foocontroller for logging, check nice delegate kotlin // usage companion object { private val log by logger } // definition fun <r : any> r.logger : lazy<logger> { return lazy { loggerfactory.getlogger unwrapcompanionclass this.javaclass .name } } private fun <t: any> unwrapcompanionclass ofclass: class<t> : class< > { return if ofclass.enclosingclass != null && ofclass.enclosingclass.kotlin.companionobject?.java == ofclass { ofclass.enclosingclass } else { ofclass } } icu4j - big lib fo such small usage? in foo kotlin val message: string get = rule.format value can be replaced to lazy delegate. object is immutable, no needs to format each time no need @autowired with @bean annotations check config.oauth package try to find another way to deal with null's in such cases settingsuserdetailsservice settings.users.find {it.user == username}!! oauth2errorcontroller not sure how it will work with ui less clients?