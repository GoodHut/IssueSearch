 URL : "https://github.com/AdamsLair/duality/issues/509" TITLE : optimize component lookup BODY : summary looking up a component by type is currently based on dictionary lookups in both gameobject and scene . there is potential to improve this, especially for static / generic lookups where the type is known as a jit time parameter. analysis - consider the following sample code: csharp public t getcomponentvarianta<t> { // doing a dictionary lookup, which is cheap but not trivial component component; if this.map.trygetvalue typeof t , out component return component as t; else return null; } csharp public t getcomponentvariantb<t> { // statically bound lookup index. jit-compiled into a simple read op. int index = componenttype<t>.lookupindex; // every component type has a fixed element index. basically just another cmp and read. return index < this.table.length ? this.table index as t : null; } - due to the fact that most component lookups are based on concrete types using the generic lookup variant, an optimization like this could have a noticeable effect. - dynamic or multi-type lookups can use fallback behavior using a statically stored and constructed dictionary mapping a system.type to a lookup index. for these cases, performance would be the same as before the change. - memory-wise, gameobjects would be simplified and optimized since there would no longer be one dictionary instance per type, but a simple array. this would be both smaller and less sparse than the current data structure. - this may or may not be a breaking change. verify this and then decide which branch to implement this on.