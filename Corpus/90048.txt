 URL : "https://github.com/graphql/graphql-js/issues/957" TITLE : rfc: postresolve callback BODY : the result that i return from a mutation isn't necessarily the result that gets returned from execute or subscribe . for example, let's assume a post collection and comment collection with the following query: post idx: $idx { title comments { body } } now, my query is: resolve _, {idx} => post idx this returns only a partial result, but that's cool because on my post schema, i have the following: comments: { type: new graphqllist comment , resolve {idx} => comments.filter comment => comment.postidx === idx } now let's say i want to send that result to a pubsub. if i did it from within the query, then that resolve function for comments would get executed once per listener, bleh. alternatively, i could fetch comments from within the query, but then if the query doesn't need comments, it's a wasted db hit. another approach is to catch the value returned from execute , look for the field post , and publish that value to the pubsub, but that breaks with aliases, not to mention it isn't very modular. the last option i have is to implement an in-memory cache to reduce the cost of comments.filter , but that only reduces the cost a little bit, plus then i'd want to clear it after all the listeners got called, and that's a headache. it'd be much easier to resolve my query/mutation, let graphql do it's magical thing by filling up the return object, and then having it call a postresolve callback with the response. of course, if there's a simpler way to accomplish this, i'd love to learn!