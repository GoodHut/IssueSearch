 URL : "https://github.com/boxed/instar/issues/20" TITLE : getting path items? BODY : sorry to trouble the instar maintenance team. first, thank you for instar. i really love the ability to use it as a sort of map path transformation language with the . it's been very helpful. i have a question, though. it might be a feature request, or maybe a misunderstanding. thank you for your indulgence in considering it. i am trying to figure out how to pass the key matched by a in to the transformation function. so, for example, imagine: clojure def x {:objects {:a {:type :npc :script a.script } :b {:type :object :script b.script } :c {:script c.script } :npc {:script d.script }}} i can get all the :type keys and return new ones with a transform x :objects :type ... . what i would like to do, however, is transform that type in this way: a. if it exists, do nothing b. if it doesn't exist, set :type to :npc if the key of that innermost map is :npc , otherwise set it to :object . in other words, i effectively want the innermost :type key to always be present, and if not present, have it default to :object unless the outer key is :npc . this means i need to know the whole transformation path the part inside the vector as an input to the transformation function. i have played around with %% and %> a bunch of times using functions like fn & rest println rest last rest to see what's going on viscerally but can't figure out how to get the :a , :b , :c , or :npc tag into the transformation function. is this even possible? for example, putting %> in place of the in the transform above gives me the value of the matched at that point i.e., the map that contains or doesn't contain a :type , rather than the matched key itself. thanks for any thoughts.