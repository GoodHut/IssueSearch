 URL : "https://github.com/IndySockets/Indy/issues/72" TITLE : memory leak in openssl BODY : within openssl, error queue data structures are allocated automatically for new threads and must be freed when the thread terminates. currently, tidserveriohandlersslopenssl does not handle this. modifying tidsslsocket.destroy removed the leaks: destructor tidsslsocket.destroy; begin if fssl <> nil then begin //ssl_set_shutdown fssl, ssl_sent_shutdown ; ssl_shutdown fssl ; ssl_free fssl ; fssl := nil; end; freeandnil fsslcipher ; freeandnil fpeercert ; err_remove_thread_state 0 ; <---- add this line inherited destroy; end; however, tidsslsocket is not tied to any particular thread, so its destructor is not the best place to call err_remove_thread_state . a better approach is to hook into the threads that are managed by the tidschedulerofthread... components directly and do the cleanup during thread shutdowns. derive a new class from tidthreadwithtaskclass, override its virtual afterexecute method to call err_remove_thread_state , assign the desired tidschedulerofthread... component to the tidtcpserver.scheduler property, and assign the custom class type to the tidschedulerofthread.threadclass property. need to figure out a way to make this more automated.