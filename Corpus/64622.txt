 URL : "https://github.com/akxcv/vuera/issues/8" TITLE : handle component update BODY : currently, in both react and vue wrappers, if the component prop is changed, nothing happens. example: jsx import registereduser from './registereduser.vue' import guestuser from './guestuser.vue' const user = props => { const { registered, user } = this.props const component = registered ? registereduser : guestuser return <component user={user} /> } or, in vue: vue <template> <div> <registered-user v-if= registered :user= user /> <guest-user v-else :user= user /> </div> </template> <script> import registereduser from './registereduser' import guestuser from './guestuser' export default { props: 'registered', 'user' , components: { registereduser, guestuser }, } </script> we expect the component to change from registereduser to guestuser and back when we change the registered prop, but this does not happen, because both react and vue wrappers essentially cache the component upon creation. this use case is probably not very common, however, this should be handled correctly.