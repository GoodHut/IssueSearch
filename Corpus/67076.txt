 URL : "https://github.com/locationtech/geotrellis/issues/2466" TITLE : optimise s3 interaction BODY : we figured out that s3 connections are not parallelized well in the java aws sdk . it was measured that on slow connections it makes sense to parallelize all connections by spawning more threads and splitting the request data into smaller chunks. the slower internet connection is the bigger difference is easier to notice. according to this fact we can investigate how it is possible to speed up already fast but probably not enough s3 connections how to speed up getobject request .getobjectcontent calls . 1. how we can use futures and how it is possible to determine an optimal way to split data into chunks to parallelize everything using setrange http://docs.aws.amazon.com/awsjavasdk/latest/javadoc/com/amazonaws/services/s3/model/getobjectrequest.html queries. does this approach makes sense at all? 2. there is an interesting transfermanager http://docs.aws.amazon.com/awsjavasdk/latest/javadoc/com/amazonaws/services/s3/transfer/transfermanager.html api, which works faster or should work faster as my tests were limited but it makes a good highly parallelized downloads into _files_. the disadvantage of this api that it works only with _files_ downloads data from s3 into _files_ . we can consider building an in-memory version of it and verifying that it makes sense and it indeed effects on objects downloads. there is already an issue in their repo: https://github.com/aws/aws-sdk-java/issues/893 it is a bit a small r&d issue to clarify aws s3 api and to double check that we use it efficient.