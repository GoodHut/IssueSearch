 URL : "https://github.com/python/typeshed/issues/1464" TITLE : issues with enum indexing BODY : i encountered some issues with indexing on enum classes that use multiple inheritance. i'm using the following test script: python from enum import enum from typing import type_checking if not type_checking: reveal_type = print class i int, enum : a = 1 reveal_type i 'a' e: revealed type is '__main__.i' class s str, enum : a = '1' reveal_type s 'a' e: revealed type is '__main__.s' class f float, enum : a = 1.0 reveal_type f 'a' e: revealed type is '__main__.f' all of this works at runtime; it prints i.a, s.a, f.a. with current mypy master incorporating most recent typeshed changes i get: $ mypy bin/enumindex.py bin/enumindex.py:7: error: definition of __new__ in base class int is incompatible with definition in base class enum bin/enumindex.py:9: error: revealed type is 'any' bin/enumindex.py:9: error: value of type type i is not indexable bin/enumindex.py:11: error: definition of __new__ in base class str is incompatible with definition in base class enum bin/enumindex.py:13: error: revealed type is 'any' bin/enumindex.py:13: error: value of type type s is not indexable bin/enumindex.py:17: error: revealed type is 'enumindex.f' with the most recent mypy release it's better: $ mypy bin/enumindex.py bin/enumindex.py:9: error: revealed type is 'enumindex.i' bin/enumindex.py:13: error: revealed type is 'any' bin/enumindex.py:13: error: value of type s is not indexable bin/enumindex.py:17: error: revealed type is 'enumindex.f' so there's a regression, which is perhaps caused by 1352 cc @sproshev . perhaps we should revert that? but the previous behavior was buggy too: somehow indexing worked on multiple inheritance from float or int, but not str. i'm not sure how to explain that yet. it doesn't reproduce in a mypy test, so presumably it's due to something in the typeshed stubs.