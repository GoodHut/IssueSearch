 URL : "https://github.com/Romakita/ts-express-decorators/issues/76" TITLE : feature swagger ui BODY : status enhancement description the decorators should fill the swagger documentation. usage example example with a model: typescript export class eventmodel { @title id @description description of event model id @example example1 , description example @jsonproperty public id: string; @jsonproperty public startdate: date; @jsonproperty public enddate: date; @jsonproperty name public name: string; @jsonproperty {use: task} public tasks: task ; } example with the controller: typescript @controller / @controller /events export class eventctrl { @patch /:id @responses 404 , {description: not found } patch @required @bodyparams event: eventmodel : eventmodel { if event.id === 0 || event.id === { throw new notfound not found ; } return event; } } example to configure swagger ui: typescript import as express from express ; import {$log} from ts-log-debug ; import {serverloader, serversettings} from ts-express-decorators ; import ts-express-decorators/swagger ; import as path from path ; const rootdir = path.resolve __dirname ; @serversettings { rootdir, port: 8000, swagger: { path: /api-doc , specpath: ${rootdir}/spec/swagger.json , csspath: ${rootdir}/spec/style.css , showexplorer: true, spec: require ${rootdir}/spec/swagger.default.json }, debug: true } export class server extends serverloader { } acceptance criteria - swagger.json generated by ts.ed is valid, - Â  all routes decorated by ts.ed is in the swagger.json.