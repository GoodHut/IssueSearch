 URL : "https://github.com/Microsoft/TypeScript/issues/16350" TITLE : suggestion: pick by type BODY : typescript version: 2.2.1 / nightly 2.2.0-dev.201xxxxx code ts // a self-contained demonstration of the problem follows... interface aninterface { stringproperty: string; numberproperty: number; objectproperty: object; functionproperty1: => number; functionproperty2: function; functionproperty3 : number; } type pickbytype<o extends object, t extends any> = { // suggestion here: we should be able to filter object property somehow. k in keyof o && typeof o k is t : o k ; }; type stringonly = pickbytype<aninterface, string>; // { stringproperty: string; } type numberonly = pickbytype<aninterface, number>; // { numberproperty: number; } type objectonly = pickbytype<aninterface, object>; // { objectproperty: object; } type withoutfunction = stringonly & numberonly & objectonly; // { stringproperty: string; numberproperty: number; objectproperty: object; } expected behavior: in this scenario, we can pick object's properties by their type. so we can only extract properties from many class objects. actual behavior: i couldn't find the way to achieve this scenario. and also, k in keyof o && typeof o k is t as an index signature is not supported.