 URL : "https://github.com/BrianHicks/elm-cli/issues/2" TITLE : parse command line argv BODY : before we can apply elm's semantics, we need to parse the command line argv. this looks like a list of strings. i think we have three basic cases: 1. an element is an arg. example: cat x.txt becomes cat , x.txt 2. an element is a flag or the value for a flag. example: curl --header accept: application/json becomes curl , --header , accept: application/json . 3. an element is a flag and the value together. example: docker run --env= x=y busybox env becomes docker , run , --env=\ x=y\ , busybox , env . there is one major wrinkle in these semantics: --log x could mean either that x is the value of --log or that --log is a present/absent flag followed by the argument x . in other words: adjacency doesn't imply association. this means that we can tokenize correctly, but we finish parsing until the user provides semantic meaning via the api. we also have several special cases: - exactly - as an argument commonly means read from stdin or write to stdout. - exactly -- as an argument commonly indicates that the program should treat the rest of the elements as arguments instead of parsing them.