 URL : "https://github.com/STEllAR-GROUP/hpx/issues/2991" TITLE : run_as_os_thread locks up BODY : maciej brodowicz reported: the following code locks up even if it shouldn't: // copyright c 2017 maciej brodowicz // // distributed under the boost software license, version 1.0. see accompanying // file license_1_0.txt or copy at http://www.boost.org/license_1_0.txt include <hpx/hpx_init.hpp> include <hpx/hpx.hpp> include <hpx/runtime/threads/run_as_os_thread.hpp> include <iostream> include <mutex> include <thread> std::mutex mtx; void locker { std::cout << std::this_thread::get_id << : about to lock mutex ; std::lock_guard<std::mutex> lock mtx ; std::cout << std::this_thread::get_id << : mutex locked ; } int hpx_main { { std::cout << std::this_thread::get_id << : about to lock mutex ; std::lock_guard<std::mutex> lock mtx ; std::cout << std::this_thread::get_id << : mutex locked ; std::cout << std::this_thread::get_id << : about to run on io thread ; hpx::threads::run_as_os_thread locker ; //sleep 2 ; } std::cout << std::this_thread::get_id << : exiting ; return hpx::finalize ; } int main int argc, char argv { return hpx::init argc, argv ; }