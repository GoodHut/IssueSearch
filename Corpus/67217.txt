 URL : "https://github.com/exercism/xhaskell/issues/547" TITLE : parsing vs. algorithms? BODY : hi all. i opened issue 541 https://github.com/exercism/xhaskell/issues/541 last week suggesting that the matrix exercise would be better without the string tests. the eventual decision was to remove the tests. having just encountered similarish issues with 'word count', i'm trying to understand what the philosophy is here. reading the problem, it sounds like a fun little problem that is basically about building a function that turns a list into an association list of counts: a -> a, int . having written the initial code, i spent the majority of my time figuring out how to parse strings to give the desired answers. this experience has been repeated across quite a few problems: - the initial description of the problem is vague. is this intentional to teach people about dealing with vague specs? here, for instance, we're given one hypothetical example and the desired output, and the description of the problem is high level: a function that takes a text and returns how many times each word appears . - the actual problem contains some set of additional concerns that are not part of the spec, are only discoverable via trial and error or reading the test file, and don't seem especially complete or coherent. in this case, you had to know that lowercase and uppercase letters are the same, that numbers with digit characters can occur as words, that commas may or may not have spaces after them, that quotes inside of words are part of the word but quotes around words should be removed, and that punctuation other than commas or quotes should be removed. it's not clear whether i have to deal with mixed alphanumeric words or quotations that are longer than one word, since those aren't part of the test suite. is this all intentional or just sloppy? i'm finding that i'm spending most of my time on a bunch of these problems dealing with parsing issues which weren't part of the problem description. thoughts?