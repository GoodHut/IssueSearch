 URL : "https://github.com/Shopify/graphql-batch/issues/59" TITLE : warming the cache BODY : we load some records to place into the graphql context when begining a query. i'd like to warm the graphql batch loader caches with these records. at the moment i'm doing something like this with a contrived example : ruby app/graphql/record_loader.rb class recordloader < graphql::batch::loader warm_keys = :id, :uuid, :slug .freeze def self.warm_cache record warm_keys.each do |key| self.for record.class, key: key .warm_cache record if record.respond_to? key end end def initialize record_class, key: @record_class = record_class @key = key end def perform load_keys resolve unfulfilled keys records_by_key = @record_class.where @key => load_keys .index_by &@key fulfills both found keys as records, and unfound keys as nil load_keys.each { |load_key| fulfill load_key, records_by_key load_key } end def warm_cache record load_key = record.public_send @key cache cache_key load_key = promise.new.tap do |promise| promise.source = self promise.fulfill record end end end ruby app/graphql/schema.rb schema = graphql::schema.define do ... use graphql::batch use graphql::batchwarmer do |query| recordloader.warm_cache query.context :current_user end ... end ruby lib/graphql/batch_warmer.rb module graphql::batchwarmer def self.use schema_defn, &block schema_defn.instrument :query, queryinstrumenter.new block end class queryinstrumenter def initialize block @block = block end def before_query query unless graphql::batch::executor.current raise move use graphql::batchwarmer below use graphql::batch in your schema, or remove it end @block.call query end end end is there any interest including some sort of cache warming facility in this gem?