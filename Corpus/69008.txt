 URL : "https://github.com/caotingjie/Blog/issues/8" TITLE : spring aop 注解形式 BODY : aspectoriented programing，面向切面编程。 &emsp;&emsp;aop主要用于日志记录，性能统计，安全控制（权限控制），事务处理，异常处理等。将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。 &emsp;&emsp;spring aop织入增强 advice 的方式有两种 如果连接点实现了接口采用jdk自带的动态代理的形式实现织入，如果连接点没有实现接口则采用动态字节码生成技术 cglib 实现织入。 aop常用术语： 连接点 joinpoint &emsp;&emsp;增强程序执行的某个特定位置 要在哪个地方做增强操作 。spring仅支持方法的连接点，既仅能在方法调用前，方法调用后，方法抛出异常时等这些程序执行点进行织入增强。 切点（pointcut） &emsp;&emsp;切点是一组连接点的集合。aop通过“切点”定位特定的连接点。通过数据库查询的概念来理解切点和连接点的关系再适合不过了：连接点相当于数据库中的记录，而切点相当于查询条件。 增强（advice） &emsp;&emsp;增强是织入到目标类连接点上的一段程序代码。表示要在连接点上做的操作。 切面（aspect） &emsp;&emsp;切面由切点和增强（引介）组成 可以包含多个切点和多个增强 ，它既包括了横切逻辑的定义，也包括了连接点的定义，springaop就是负责实施切面的框架，它将切面所定义的横切逻辑织入到切面所指定的链接点中。 常用注解： @pointcut 定义切点