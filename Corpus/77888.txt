 URL : "https://github.com/rnystrom/GitHawk/issues/597" TITLE : optimistic state manager BODY : a lot of actions have now got optimistic states, where we assume the network request will be successful and update the ui accordingly and then revert the change if we receive an error the current solution isn't really scalable and is pretty easy to make mistakes with found that out the hard way ðŸ˜… in most cases we only have one case of storage for a change, for example locking/closing. if you close and then open a issue you only see one view added to the timeline open because that's all we keep track of. if you refresh the feed, they all appear. just wondering if there's a better way to be doing this? some considerations: - when we know it was successful, actually commit the change to the main model? - the same model might be added multiple times new comments, open/close, etc - they might pass/fail in a different order than they were triggered - scalability for new actions