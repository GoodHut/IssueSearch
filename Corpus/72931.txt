 URL : "https://github.com/jordan4ibanez/open_ai/issues/22" TITLE : class-hierarchy for mobs BODY : at the first i really like the class based structure of this mod. but currently just the functionality is grouped to classes. i miss the class-hierarchy of the mob-classes. currently there is just one mobs-class named ai_library that is copied to all defined mobs and does have all the logic. i see you run into problems because there is no universal logic possible. the result are many not needed if's like if jumper then, elseif aqua, then, elseif ridable then .... i tried to fix a issue with npc after stop walking, because freezing of the walk-animation seems strange for npc. then i realized the freeze is fine for cows or horses, and allways enable the stay-animation will be seems strange for this npc types. i'm not a oo-guru, but i imagine it as follows some pseudo-code : -- base-class that contains just the really universal minimum framework and luaentity related things ai_base = {} then the hierarchy ai_animal = table.copy ai_base ai_animal.animation = animal_specific_animation ai_monster = table.copy ai_animal --have same animation ai_npc = table.copy ai_animal ai_animal.animation = npc_specific_animation now there is no mix with the many ifs. each method is assigned to the right class. of course we need a registration, like register_ai type , class that register the usable classes in a table. ea_table npc = ai_npc the register_mob can get the mob_type = npc in interface to select the right implementation. if the register_ai is available for other mods it is possible easy to add new mobs from other mods a second advantage of multiple more specific classes is: the classes can contain usable defaults so the register_mob parameters list can be reduced. a sample: the npc does have allways the visual = mesh with mesh = character.b3d and allways the same collisionbox and radius...