 URL : "https://github.com/theodesp/go-blooms/issues/1" TITLE : memory usage of bool BODY : while a bool is great for simplicity, i suspect it takes much more space in memory than a compact bitset. this would be caused by the memory layout of the underlying array, where each bool is individually addressable. this is important because bloom filters are designed specifically to be space-efficient, storing only the conflated bitset instead all the elements themselves, or even all the hash values. go has no built-in bitset type, but it seems that a common and efficient ready-to-use bitset implementation is big.int https://golang.org/pkg/math/big/ int . i created an idiomatic snippet here https://www.programming-idioms.org/idiom/68/create-a-bitset/284/go . it would be interesting to run a memory usage benchmark of bool vs big.int . the speed performance results would be interesting as well i have no idea which one wins on speed! . fanis, what do you think?