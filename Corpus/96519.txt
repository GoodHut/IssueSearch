 URL : "https://github.com/Macaulay2/M2/issues/657" TITLE : exponentiation is too slow BODY : hi, i know this has been suggested before, but exponentiation of ring elements ie, just f^n where f is a polynomial is much slower than it can be in positive characteristic. for example in the fsing/poschar package we have the following code which is much much faster. i would suggest that something like this be done for macaulay2 core since the speed increase is so large. fastexponentiation = method typicalvalue => ringelement fastexponentiation zz, ringelement := ringelement => n, f -> if n < 0 then error fastexponentiation: first argument must be a polynomial over a nonnegative integer. ; if char ring f == 0 then error fastexponentiation: second argument must be a polynomial over a field of positive characteristic. ; p:=char ring f; e:=adicexpansion p,n ; product e, e -> sum terms f^ e e , g -> g^ p^e adicexpansion = method typicalvalue => list ; --computes the terminating base p expansion of a positive integer. --gives expansion in reverse... so from left to right it gives --the coefficient of 1, then of p, then of p^2, and so on adicexpansion zz, zz := list => p, n -> if p <= 0 then error adicexpansion: expected first argument to be positive ; if n < 0 then error adicexpansion: expected second argument to be nonnegative ; if n < p then { n } else prepend n % p, adicexpansion p, n // p -- would this be faster if it were tail-recursive? we could do this w/ a helper function. for example, i5 : r = zz/3 x,y,z ; f = random 4, r + random 3, r i7 : time fastexponentiation 21, f ; -- used 0.00179836 seconds i8 : time f^21 ; -- used 0.218102 seconds