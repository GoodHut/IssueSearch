 URL : "https://github.com/kbrsh/moon/issues/135" TITLE : objects as attributes? BODY : are components just fancy element wrappers or am i supposed to be able to pass richer forms of data through the parameters? this is with v1 moon, and a slightly modified monx just so that it is compatible?? with v1 https://github.com/levischuck/moon-rerender in this reduced example, i have a list of related buttons which are populated dynamically. i would like the prompt component to make the buttons based on an input array of simple button-detail-objects {label:'text here', key:'code-thing-here'} however, instead it seems to be casted to a string like object, object .. i looked up some old vue stuff and they suggested using json stringify and parse between things which seems so incredibly distasteful. from index.html <prompt m-if= store.state.pendingprompts options= {{store.state.prompts}} ></prompt> from scripts.js const store = new monx { state: { pendingagree: true, agreetext: yes , // normally prompts: { label: adam jensen , scene: adam }, { label: jc denton , scene: jc } , // normally false pendingprompts: true, }, ... } of additional note, when i dispatch to monx and change the agreetext , the button is not updated to reflect this. however when pendingagree is updated within a dispatch action, the m-if attribute behaves as expected and will hide the button. <c-button m-if= store.state.pendingagree m-on:click= agree content= {{store.state.agreetext}} ></c-button> 1. is there any way to pass structured data, or is everything a string? 2. how come m- attributes re-render but others do not re-render? is this an artifact of monx and moon?