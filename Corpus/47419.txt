 URL : "https://github.com/tc39/proposal-dynamic-import/issues/52" TITLE : paths mapping support BODY : proposal: add support for mapping between module name and path url when the url of the module is not known at runtime, but the module name is known web applications with plugins the map configuration of some module loaders is very handy e.g. https://github.com/systemjs/systemjs/blob/master/docs/getting-started.md map-config, http://requirejs.org/docs/api.html config-paths . the ability to resolve specific module name to different urls is important for large and pluggable web applications. assumption as far as i understand, after dynamic import is available in browsers i could write something like this: let mymodule = await import http://no-cors-issues.url-known-at-runtime-only.org/mymodule ; motivation easy handling of common code base server and front-end for pluggable applications: in case same module needs to be loaded from one place in browser lets say cdn and from other place in server environment let's say node_modules, resolved from module name , the naive approach would look like: common-code.js let mymodulename = null if isnodejs mymodulename= mymodule ; if isbrowser mymodulename= http://no-cors-issues.url-known-at-runtime-only.org/mymodule ; let mymodule = await import mymodulename ; instead of: browser-only.js import.map { mymodule : http://no-cors-issues.url-known-at-runtime-only.org/mymodule } common-code.js: let mymodule = await import mymodule ; consider another example: common-code.js getdynamicmodulepath modulename { let mappings = { mymodule : http://no-cors-issues.url-known-at-runtime-only.org/mymodule }; return mappings modulename ? mappings modulename : modulename; } let mymodule = await import getdynamicmodulepath mymodule ; this example represents portable, but very ugly code that could be implemented on top of dynamic import.