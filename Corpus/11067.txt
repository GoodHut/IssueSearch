 URL : "https://github.com/foxcpp/SgCore/issues/1" TITLE : fast thread pool BODY : what? thread pool that executes functions from queue. why fast? event loop will actively use thread pool to execute handlers in different threads in order to get better performance lower event delivery latency . how i would implement it? avoid unnecessary abstractions avoid copies at all costs implement and use a look-free queue if possible cpp // create new pool with threads_count ready threads. thread_pool pool unsigned threads_count = 0 ; // change threads count to new_threads_count. // if new_threads_count < current count, some threads will be removed from pool. pool.change_threads_count unsigned new_threads_count ; // current thread becomes a part of pool. // note: it's not noreturn , it will return if pool's thread count decrease. pool.join_current ; // remove current thread from pool. pool.detach_current ; // adds function with signature void to queue. it is undefined where and when it will be called. // returns true if function is scheduled and false if ignored see destructor description below . pool.schedule callable function ; // pool goes out of scope, blocks until queue is empty no new functions can be scheduled then stops and joins all threads.