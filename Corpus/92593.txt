 URL : "https://github.com/ClarenceC/knowledge/issues/9" TITLE : 关于npm run dev和build BODY : npm run xxx是执行配置在package.json中的脚本，比如： scripts :{ dev : node build/dev-server.js , build : node build/build.js , unit : karma start test/unit/karma.conf.js --single-run , e2e : node test/e2e/runner.js , test : npm run unit && npm run e2e , lint : eslint --ext .js,.vue src test/unit/specs test/e2e/specs }, 只有这里配置了，你才能run，所以不是所有的项目都能npm run dev/build。要了解这些命令做了什么，就要去scripts中看具体执行的是什么代码。这里就像是一些命令的快捷方式，免去每次都要输入很长的的命令（比如unit那行）。 为什么会出现error，就是因为在跑这些对应的脚本文件的时候，可能是某些依赖没有被加载等的。 一般项目都会有build, dev, unit等，从名字上基本能看出来是干什么的。比如上面配置的unit，就是开启karma去跑单元测试，具体测试内容，要去看karma.conf.js；e2e就是end to end的端到端测试；而test则会将单元测试和端到端测试都执行。 有些项目中根据需要，还会配置其他命令，例如自动生成文档，比如这里： build:doc : node ./scripts/build-doc.js , 如果你去build-doc.js中看的话，会发现，这个脚本在遍历所有源文件，解析注释和其他内容，自动生成api文档 script npm 会在项目的 package.json 文件中寻找 scripts 区域，其中包括npm test和npm start等命令。 其实npm test和npm start是npm run test和npm run start的简写。事实上，你可以使用npm run来运行scripts里的任何条目。 使用npm run的方便之处在于，npm会自动把 node_modules/.bin 加入$path，这样你可以直接运行依赖程序和开发依赖程序，不用全局安装了。只要npm上的包提供命令行接口，你就可以直接使用它们，方便吧？当然，你总是可以自己写一个简单的小程序。