 URL : "https://github.com/ilianaw/rust-crowbar/issues/12" TITLE : event argument type BODY : along the same lines as 11 it would be nice to move away from event: value as the input to a lambda function. a few options: - allowing anything : deserialize would be great but would rely on inference, which may require an annotation of the type in the handler definition. not a problem at all for fn handler event: whatever, context: context , but maybe slightly annoying for |event: whatever, context| ? not sure if that's a real concern or not, this seems like a nice ergonomic approach. - value type could just be a newtype wrapper around pyobject that impls deserializer so that handlers could just do: let event = whatever::deserialize event ? . value-esque accessors to the pyobject's attributes could be supplied for anyone who wants to use it without serde and just access things by string keys.