 URL : "https://github.com/littledan/proposal-unified-class-features/issues/8" TITLE : on extras BODY : extras semantics should be better defined. right now it is possible to define the same property in extras that belong to different original properties. it is even possible to define the same property more than once in the same extras array. what is the protocol here? while it may indicate a bug, if somebody did it inadvertently, i suspect that the use case for that can be third-party libraries, which intentionally decided to create a property with the same name. examples: a decorator wants to provide a default implementation for a certain method, if it is not defined by a user or some other library. or piggy-back on it. i want to override destroy method in different decorators, so i can destroy/finalize objects created to fulfill decorators purpose delete html elements, remove event listeners, flush streams, notify a server that i am done, and so on . ideally it would be nice to have a way to reconcile such duplicates with a callback, and provide a reasonable default for it. finisher looks like the right place for that. for that it should receive dups as a parameter, so potentially it can make sense of it. the default action can be as simple as overwriting duplicate properties indiscriminately. just for completeness: if it is possible to add more properties, why it is not possible to remove some of them? the simplest example would be a meta-property, which is saved to guide other decorators, or reflection methods, yet should not be preserved on a property/instance/constructor.