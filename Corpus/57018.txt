 URL : "https://github.com/imneme/pcg-cpp/issues/19" TITLE : pcg64 can't be printed BODY : here's an example that won't build for pcg_t = ::pcg64 but works for pcg_t = ::pcg32 . include <random> include <sstream> include third_party/pcg_random/include/pcg_random.hpp namespace { using pcg_t = ::pcg64; } int main { pcg_t rng std::random_device{} ; std::stringstream out; out << rng; return 0; } i can verify similar issues in pcg-test.cpp if you add prints to std::cout or reads from std::cin. what i believe is happening is: you're relying on koenig lookup to find the definitions of operator<< and operator>> in namespace pcg_extras . but pcg128_t is typically a typedef for __uint128_t ; koenig lookup doesn't work on typedefs or more precisely, looks at the resolved type's namespace, not the typedef's. as i see it there are three possible fixes: 1. move the operator definitions to the global namespace -- this is a bad idea, for one thing because anyone could have a conflicting definition. 2. add a wrapper class around the typedef. this would solve the namespacing issue neatly; i don't know if we'd incur runtime cost from the compiler choking on the wrapper. hopefully not but hard to prove. 3. replace the operator<< for pcg128_t with similar free functions named say input and output and use sfinae in the definitions of the engine operator<< to prefer those if available. a bit clunky, but would work. also sort of necessary for the uint8_t stuff, i think. i'm hacking together 3 to see how bad it looks, but not done yet.