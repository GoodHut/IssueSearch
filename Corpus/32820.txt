 URL : "https://github.com/babel/babylon/issues/636" TITLE : wrong await parsing BODY : original issue submitted by @droooney in https://github.com/babel/babel/issues/5966 babel version: 6.25.0 . nodejs and npm version is irrelevant the issues can be reproduced at http://babeljs.io/repl/ . 1. const await = foo; throws a syntax error because it is a reserved word, though it is a reserved word only inside an async function. 2. await cannot appear inside function arguments inside default values or computed keys . async function foo bar = await baz {} or async function foo { await baz : bar } {} here babel throws an error because await is an unexpected reserved word see 1, apparently babel thinks that await is not inside a function . though the reason why it's a syntax error is because it's not allowed to use await inside arguments it is a function body actually . that's why the following snippet does not throw any error though it should . async function foo { async function bar a = await baz {} } chrome as well as nodejs throws for this illegal await-expression in formal parameters of async function . firefox throws await can't be used in default expression . 3. the same as for 2 goes for class properties: async function a { class foo { bar = await baz ; } } is also should be a syntax error because the bar = await baz part is actually inside a constructor which can't be an async function. probably, there are more similar cases. p.s.: actually all of these work for yield as well.