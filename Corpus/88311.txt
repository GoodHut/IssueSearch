 URL : "https://github.com/rust-lang/rust/issues/42721" TITLE : need negative trait bound BODY : rust use std::convert::from; struct someerror; enum error<e> { one someerror , two e , } /// impl<e> from<someerror> for error<e> where e: !someerror { impl<e> from<e> for error<e> { fn from error: e -> self { error::one error } } impl<e> from<someerror> for error<e> { fn from error: e -> self { error::two error } } it's produces error: rustc 1.18.0 03fc9d622 2017-06-06 error: main function not found error e0119 : conflicting implementations of trait std::convert::from<someerror> for type error<someerror> : --> <anon>:15:1 | 9 | / impl<e> from<e> for error<e> { 10 | | fn from error: e -> self { 11 | | error::one error 12 | | } 13 | | } | |_- first implementation hereadd 14 | 15 | / impl<e> from<someerror> for error<e> { 16 | | fn from error: e -> self { 17 | | error::two error 18 | | } 19 | | } | |_^ conflicting implementation for error<someerror> error: aborting due to previous error may'be shall implement contruction: rust impl<e> from<someerror> for error<e> where e: !someerror { ... }