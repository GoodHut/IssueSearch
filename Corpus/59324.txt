 URL : "https://github.com/chrysn/aiocoap/issues/99" TITLE : transition request api BODY : i think the current request api is bad -- returning from context.request x a response that has an awaitable .response and possibly an aiter-able .observation is inherently racy or needs additional queuing , and the tricks around making sure that even if the user forgets about .observation it is destroyed and the observation is dropped network-side are ugly. the refactoring currently in process to accommodate allow coap over tcp and proper oscore still implements that version for compatibility, but a process towards a new request api should be started. i'm thinking along the lines of python ctx = await newapicontext.create_client_endpoint a unicast non-observe request gets awaited directly and returns a message again direct_response = await ctx.request message ... print direct_response.payload a unicast observe request is an iterable on its own; no distinction between first and future responses because why should there async for latest in ctx.observe message ... : print latest.payload multicast would have dedicated methods as before: python multicast behaves as an iterator as well: async for response in ctx.multicast_request message ... : print f response from {response.get_request_uri }: {response.payload} multicast observation would give an iterator of iterators -- but is that even a thing? current users, would that change work well for you? how long would you need both apis around to migrate?