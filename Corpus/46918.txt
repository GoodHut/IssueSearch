 URL : "https://github.com/bluelinelabs/Conductor/issues/243" TITLE : new component: module BODY : i have an unfinished idea i want to express: in my apps i often use headless fragments to encapsulate framework behavior. for example i have a headless permissionfragment , a headless googlefitfragment , ... they use the callbacks like permission result, or onactivityresult to manage the state of the framework component. that way i can just call fun permissionfragment.request permission : string : single<permissionresult> or whatever and do not have to re-implement the same logic in all classes that use permissions or what ever . now i was thinking that it would be great to have something like this for conductor because often the headless fragment is a fragment and sometimes there are lifecycle issues with it . i'd call this something like module and it would be quite similar to a controller just without the view parts. there should be methods like fun addmodule module : module, tag: string , fun findmodule tag: string : module? on the router to receive these modules. so now when the user is inside a controller he could call kotlin fun onattach  { val permissionmodule = router.findmodule permission_module as permissionmodule permissionmodule.request camera .subscribe { println result is $it  } }