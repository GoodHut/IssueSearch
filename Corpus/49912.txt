 URL : "https://github.com/orange-games/phaser-input/issues/53" TITLE : usage with typescript BODY : hi folks, i've been tinkering with this plugin today using vs code and typescript, using gulp as my build manager. i encountered a few issues along the way and thought i would detail my process, and/or see if there is a better way of doing this. accessing the module globally firstly i had to get the typescript compiler to make use of the definitions, as the phaserinput module was not available to me. to do this, i: 1. created node_modules/@orange-games/phaser-input/build/typings.json which contains: json { name : phaser-input , main : phaser-input.d.ts , global : true } 2. modified ./typings.json , which now contains: json { globaldevdependencies : { phaser : file:node_modules/phaser-ce/typescript/typings.json , phaser-input : file:node_modules/@orange-games/phaser-input/build/typings.json } } 3. ran typings install in the project root directory this allowed me to access the phaserinput module globally. adding the plugin next up i was unable to add the plugin to the game, as i was getting this error: argument of type 'typeof plugin' is not assignable to parameter of type 'plugin'. property 'active' is missing in type 'typeof plugin'. after a browse at some other plugins, i notice they use this method which also works in this case typescript this.game.add.plugin new phaserinput.plugin this.game, this.game.plugins ; gaining access to game.add.inputfield when trying to use the game.add.inputfield method i was getting the following error: property 'inputfield' does not exist on type 'gameobjectfactory'. to fix this i added the following member variable to the phaser.state i am creating typescript export default class menu extends phaser.state { public game: phaserinput.inputfieldgame; public create { const input = this.game.add.inputfield 10, 10 ; // etc... } }