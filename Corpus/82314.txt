 URL : "https://github.com/metafetish/stpihkal/issues/9" TITLE : add shock collar protocol BODY : collar: https://www.amazon.com/gp/product/b00w6uvrok/ref=oh_aui_detailpage_o08_s00?ie=utf8&psc=1 code: import rflib import binascii import bitstring mhz=1000 1000 _collar_baud_pwm=4200 _collar_baud=_collar_baud_pwm/4 _collar_freq=434 mhz def _pwm_to_raw pwm : raw = bitstring.bitstream while true: try: nybble = pwm.read 4 if nybble.bin == 1110 : raw += bitstring.bits 0b1 elif nybble.bin == 1000 : raw += bitstring.bits 0b0 elif nybble.bin == 0000 : pass ew else: print nybble print nybble.bin raise valueerror bad nybble except bitstring.readerror: break return raw def _raw_to_pwm raw : pwm = bitstring.bitstream for bit in raw.bin: if bit == 0 : pwm += bitstring.bits 0b1000 else: pwm += bitstring.bits 0b1110 return pwm def configure_rfcat d : d.setfreq _collar_freq d.setmdmmodulation rflib.mod_ask_ook d.setmdmdrate _collar_baud_pwm def tx_raw d, raw, repeat=8 : pwm = _raw_to_pwm raw tosend = bitstring.bitstring bytes= \x00\x01\xf0 , length= 20 + pwm + bitstring.bits bytes= \x00\x00\x00 print tosend.hex d.rfxmit tosend.tobytes , repeat=repeat def zap d, intensity : assert intensity <= 100 assert intensity >= 0 template=bitstring.bitstring bin= 010000001101110100101011100101000011111100 template 25:32 = bitstring.bits uint=intensity, length=7 tx_raw d, template class shockcollar: def __init__ self : d = rflib.rfcat configure_rfcat d self.d = d def shock self, intensity=1.0 : intensity_int = int intensity 100.0 zap self.d, intensity_int