 URL : "https://github.com/Cadasta/cadasta-sdk/issues/7" TITLE : higher level abstraction BODY : currently, the cadastasession class manages authentication and requests to the cadasta platform and the endpoints submodule allows users to not think about urls. this is helpful but it still requires the users to have knowledge of restful interactions e.g. use session.get for reading and session.post for creating . i think it would be useful to create tooling to manage data at a higher level. this could look something like: python cadasta = cadastainterface cadastasession party = cadasta.organization.get slug='foo' .party.create slug='my-party' project = party.project.create name='my new project' to model the relational nature of urls between classes, i believe we would make a model class for each data type with a url_template property e.g. /organizations/{slug} . when instantiating related subclasses, we could replace the portions of url_template that exist on the subclass with the populated url from the parent class e.g. /organizations/{slug}/projects/{slug} -> /organizations/my-org/projects/{slug} if we were looking at organization.get slug='my-org' .project . the api requests should be lazy to limit the amount of unnecessary requests i.e. we don't actually want to query for organization.get slug='my-org' when we are running organization.get slug='my-org' .project.get slug='foo' .