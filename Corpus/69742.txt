 URL : "https://github.com/marcotcr/lime/issues/101" TITLE : tree based explanations BODY : hey there, i was thinking about adding tree based explanations to lime. it seems like a lot of the explanations assuming that we're getting linear results. i was curious how you would tackle refactoring this to make the format of explanations more general as opposed to assuming it was linear. i was going to add subclasses to explanations.py for treeexplanations and another for linearexplanations, which i think is likely uncontroversial. however, i'm unsure of the preferred way of changing the format for explain_instance in lime_tabular for example. there are a couple of options 1 return dummy intercept and local_exp entries, and augment with additional entries for tree explanation. the interface stays consistent for old implementation, and new clients have to differentiate the results. 2 rather than returning intercept and local_exp as top level entries in the response, nest them under explanation_params which are conditional given the type of explanation that's generated i don't know if there are plans or desires to support explanations of more than linear + tree types, but i suppose it's possible . this future proofs it to make it easier to add new types of explanations. this has the drawback of being a break change, but more consistent for clients implementing the results. i also thought it might be nice to add some examples longer term, visualizing it, using something like http://bl.ocks.org/pprett/raw/3813537/. thoughts?