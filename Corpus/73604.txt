 URL : "https://github.com/ThePhD/sol2/issues/378" TITLE : curious : thread safety? BODY : i'm working with the unreal 4 engine, which uses seperate threads in c++ for gameplay tasks and ai-stuff. my sol2-lua state is in the gameplay-thread. i read on stackoverlow that normally accessing the lua state is not thread safe and can even mess up the lua stack. i'm wondering : is sol2s implementation of sol::thread and sol::coroutine providing thread-safety the the lua state? if not, could you provide any advice how accessing a sol2 lua state from several threads could be done mutexes in c++? ? right now i'm calling the lua state from the ai thread via c++ sol::thread thread = sol::thread::create this->gamemodelua ; sol::state_view view = thread.state ; sol::coroutine function = view decide_command ; sol::protected_function_result r = function uniqueid, characterid, sol::as_table this->combatevents ; but i'm unsure whether this actually provides any thread-safety. the documentation about coroutines and threads sol2.readthedocs.io/en/latest/api/thread.html http://sol2.readthedocs.io/en/latest/api/coroutine.html have sentences like see thread for an example on how to get a coroutine that runs on a thread separate from your usual “main” lua_state. and sol::thread is a separate runnable part of the lua vm that can be used to execute work separately from the main thread, but it's not very clear if that means that these are c++ thread-safe. or should i use sol::main_thread ... for a multithreaded c++ program? if so, could you give an example how to use it? the documentation doesn't have any examples for this one. if it's important, i'm using the latest version of luajit.