 URL : "https://github.com/J-F-Liu/pom/issues/4" TITLE : list behaviour BODY : i am not sure if this is intended behaviour, but i find the way the list combinator works to be a bit counter-intuitive . it seems that, if it successfully matches a separator but ten fails to match the next element, it backtracks all the way to the beginning of the list, and the whole combinator fails. i would expect it to backtrack to the last successfully matched element. here is an example to illustrate what i mean: rust extern crate pom; use pom::{parser, datainput}; use pom::parser:: ; fn spaces -> parser<u8, > { one_of b .repeat 1.. .discard } fn works -> parser<u8, vec<u8>> { list one_of b abc , spaces seq b and - spaces } fn doesnt -> parser<u8, vec<u8>, vec<u8> > { list one_of b abc , spaces seq b and - spaces + seq b and } fn main { let mut one = datainput::new b a and b and c ; println! {:?} , works .parse &mut one ; let mut two = datainput::new b a and b and c and ; println! {:?} , doesnt .parse &mut two ; } the first parser succeeds and consumes all output, but the second fails with: rust err mismatch { message: expect item after separator, found: incomplete , position: 0 } i would expect both of them to succeed.