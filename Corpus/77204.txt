 URL : "https://github.com/dry-rb/dry-types/issues/177" TITLE : more complex validations BODY : i've read in http://dry-rb.org/gems/dry-types/constraints/ you can add validations to dry::types using the .constrained method and that 'under the hood it uses dry-logic and all of its predicates are supported'. what i'm not sure about is, how do i pass more complex constraints to this method. my use case here and i don't think i'm alone is an optional dry-struct attribute like this ruby class billheader < dry::struct constructor_type :schema attribute :type, types::strict::string.optional.constrained size: 1 end this works correctly if i provide the type attribute. the problem appears when i do not. in that case i get nomethoderror: undefined method 'size' for nil:nilclass . what i'd like to do is something like ruby attribute :type, types::strict::string.default 'z' .constrained { filled? > size? 1 } is there an easy way to do this, or do i have to define a schema for the whole constructor args hash and override the constructor, thus greatly decreasing the dry-ness of the definition?