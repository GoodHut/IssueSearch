 URL : "https://github.com/getquill/quill/issues/1006" TITLE : custom group by BODY : version : 2.3.1 module : quill-jdbc database : mysql is is possible to use group by with custom functions like group_concat? i want to construct a query like this: sql select pt.title, pt.slug, pt.id, pt.name, t.name, group_concat a.name separator ';' from projects pt left join project_types t on p.project_type_id = t.id left join projects_tags x1 on x1.project_id = pt.id left join tags a on x1.tag_id = a.id group by projects.id the problem here is how to use group by? all the examples that i found only solve aggregation problems like sum, max. but i can't figure out how to use it with group_concat? here is how my code looks so far it doesn't compile : scala case class projecttype name: string, position: int, id: long private def groupconcat t = quote { t: t => infix group_concat $t separator ';' .as string } val projectselect = quote { projects .leftjoin project_types .on p, t => p.project_type_id == t.id .groupby _._1 } val q = quote { for { p, t <- projectselect ptag <- projects_tags.leftjoin _.project_id == p.id tag <- tags.leftjoin a => ptag.exists _.tag_id == a.id .map a => groupconcat a.map _.name } yield { p, t.map _.name , tag } } the problems with this code: - groupby returns a query query ... that i don't know how to extract - if i flatmap this query, i get either a stack overflow exception, or an error with constructing ast depends on how i flatmap and where workaround i thought about writing a raw sql query. but how do i map fields in the raw query to a case class? it seems like a lot of extra code, not the best way. @getquill/maintainers