 URL : "https://github.com/BuckleTypes/bs-webapi-incubator/issues/63" TITLE : event types are confusing BODY : i'm trying out reason and bucklescript and trying to convert a simple canvas demo http://demos.playfuljs.com/particles/ as a learning vehicle. there are a couple of other bs canvas demos that have been published, and it involves little interaction with the dom. so far so good. but getting the mouse coordinates and satisfying the type system was surprisingly confusing with these bindings. this is what i tried: reason let display = document.getelementbyid display document; let canvas = switch display { | some display => display | none => raise failure could not find display dom node }; let ctx = reasonjs.canvaselement.getcontext canvas 2d ; let onmousemove e => { state.mouse.x = mouseevent.clientx e; state.mouse.y = mouseevent.clienty e; }; element.addeventlistener mousemove onmousemove canvas; but this results in a type error: error: this expression has type reasonjs.dom.mouseevent.t => unit but an expression was expected of type dom.event => unit type reasonjs.dom.mouseevent.t = dom.event_like dom._uievent dom._mouseevent dom._baseclass is not compatible with type dom.event = dom.event_like dom._baseclass type dom._uievent dom._mouseevent dom._baseclass is not compatible with type dom._baseclass @glennsl helped on discord and suggested adding a type conversion function: reason external eventtomouseevent : dom.event => mouseevent.t = %identity ; which works great! but: 1. is there a better way of doing this? 2. this is very confusing for newcomers like myself. any documentation or improvement in the underlying type signatures would go a long way here. i suspect that others will also hit this straight away as well.