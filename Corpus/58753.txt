 URL : "https://github.com/mesoscale/mmsp/issues/52" TITLE : streamline vector calc BODY : finite differencing should have better performance - bug appears in mmsp.grid.cpp in functions laplacian grid,... , etc. - the expected behavior is fast computation of gradients, laplacians, and divergence using built-in functions. - the observed behavior in profiling is unusually high residence time in laplacian and operator grid, vector<int> . proposed fix - our stock implementation of discrete laplacian and gradient operators computes the addresses of neighboring cells every time the function is called, despite neighboring coords being static entities. - operators then call operator grid, vector<int> , which passes coords through check_boundary before computing the index location. - entire process would be much faster by creating a function neighbor_coords which would store a grid of n -dimensional coordinates for high- and low-side neighboring cells, and applying check_boundaries to each stored position vector. - discrete vector operators could then call grid x y instead of grid x to efficiently access stored values, reducing overhead and improving performance.