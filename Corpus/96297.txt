 URL : "https://github.com/tastejs/todomvc/issues/1771" TITLE : error in angularjs example BODY : i'm going through the angularjs example app and am fairly sure i found an undetected bug. it doesn't affect the functionality but is confusing. in the saveedits controller function, the store service gets called like this: store todo.title ? 'put' : 'delete' todo .then function success {}, function error { todo.title = $scope.originaltodo.title; } .finally function { $scope.editedtodo = null; } ; and store.put looks like: put: function todo, index { var deferred = $q.defer ; store.todos index = todo; store._savetolocalstorage store.todos ; deferred.resolve store.todos ; return deferred.promise; } notice the index argument is not supplied. after fiddling with the debugger, i saw that setting store.todos undefined = todo does not harm the array. i think that because of this line in the controller: var todos = $scope.todos = store.todos; that store.todos is always kept up to date by the $scope.todos changes pass by reference . so the call to store.put todo,index is not really needed in this case. here is some of my console.log debugging about the array object equivalence store.todos 1 object {title: 123 456 edited , completed: false}completed: falsetitle: 123 abcdef __proto__: object $scope.todos 1 object {title: 123 456 edited , completed: false} // simulate editing the $scope.todos $scope.todos 1 .title = 123 abcdef ; 123 abcdef $scope.todos 1 object {title: 123 abcdef , completed: false} store.todos 1 object {title: 123 abcdef , completed: false} // store.todos updated for free. i guess i would recommend just fixing the call to store.put so it passes the index?