 URL : "https://github.com/pimoroni/PiratePython/issues/11" TITLE : mass storage -> mtp BODY : the current method of watching for changes in main.py - hooking the f_mass_storage function module for libcomposite - is somewhat fragile and invasive. it relies on watching for scsi write calls, with a short timeout. in its current proof-of-concept state it notifies a python script via printk , this script then remounts the filesystem and does a cache-avoiding copy of the important files using dd . this solution has several issues: it relies on potentially unstable, invasive and difficult to maintain modifications to the kernel it only works in one direction- host->device. the pi cannot write back files for display to the user. it has the potential for a race condition, where a changed file is read mid-way through rewriting it. it requires that /boot /dev/mmcblk0p1 is unmounted and remounted to sync filesystem changes file lengths specifically in this case , and this can interrupt other processes, cause reads to fail, and can be broken by mounting an .img file from /boot useful for mounting vlc.img or other additional software i'm hoping a switch to mtp will solve these issues, although it might introduce new ones. mtp is the same protocol that makes it possible to read/write files to a connected smartphone. this will be achieved with pimtpd when it's ready: https://github.com/ali1234/pymtpd