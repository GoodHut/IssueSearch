 URL : "https://github.com/fission/fission/issues/250" TITLE : grpc meets serverless BODY : hello fission community! first post so do point me to the correct location if i'm in the wrong here. : . i'm working on a microservice-first platform and decided that grpc backend is the way i'd like to go. the backend itself will support both grpc and restful endpoints using restful transcoding https://github.com/grpc-ecosystem/grpc-httpjson-transcoding . later we will support more endpoints like udp for games which i'm working proposing to the grpc community to work on. what i would like to propose is the support of building grpc services that can have a 100ms load time on demand. these services would simply be grpc bindable services a collection of apis defined by and added to a grpc server dynamically. after some time, it will be removed from the grpc server. the downside is that you will have slightly larger files to load into memory which will slow things down. but the upside is that if you have a pool of grpc services with premade connections to other grpc services if the node has them loaded already. think of it as: node 1 has service a -> service b. node 1 has service c -> service b with grpc and the concept of 'shared channels', you will not have to create a new connection to service b if both service a and service c was loaded into the warm container. another great benefit of this would be able to directly access local instances of services if they were loaded versus going across the wire. this concept could be done with fission alone as well to call local warm functions i'd love to hear the community's thoughts on this and see if this is something people are interested in. otherwise, it may make more sense to do it as a separate open source initiative.