 URL : "https://github.com/amagura/eggs/issues/9" TITLE : readline catches sigint BODY : issue description s csi responds to sigint differently after readline is loaded when csi is started without an rc file e.g. csi -n it: responds to sigint immediately and prints a new prompt, however, when/after readline has been loaded, csi only responds to sigint after encountering a carriage return \r : this behavior is awkward and differs from other major lisps implementations such as clisp and sbcl both of which respond to sigint after a short pause without any further intervention from the user . csi reports an unknown variable named rl_catch_signals when loading readline.so ; loading /home/rr257875/usr/lib/chicken/8/readline.so ... readline: rl_catch_signals: unknown variable name after doing a small amount of research, i realized that the issue is caused by the following code in interface.c : endif rl_completion_entry_function = &gnu_readline_tab_complete; rl_variable_bind rl_catch_signals , 0 ; rl_clear_signals ; rl_set_signals ; in the code above, rl_variable_bind is being misused, it is not designed to set c variables, but readline variables such as you could set by calling set ... on the command-line. the code should be something like this: endif rl_completion_entry_function = &gnu_readline_tab_complete; int rl_catch_signals = 0; rl_clear_signals ; rl_set_signals ; this misuse does not seem to be present in trunk, but is present in the most recent release.