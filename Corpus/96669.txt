 URL : "https://github.com/CyclopsMC/IntegratedDynamics/issues/195" TITLE : feature request: functions BODY : so, i'm trying to come up with a way to use integrated dynamics and tunnels to make an autocrafting system for botania. here's what i've come up with so far, in pseudo-haskell style: haskell targetlist :: list item targetlist = <proxy> currentinv :: list item currentinv = <chest inventory> stillneed :: list item stillneed = filter not . haveenough targetlist haveenough :: item -> boolean haveenough item = gt size item . havealready item havealready :: item -> int havealready = itemcounts . sameitems itemcounts :: list item -> int itemcounts = reduce + . map size sameitems :: item -> list item sameitems = flip filter currentinv . eq the idea is to have an inventory reader and an item exporter attached to a chest, with an item interface somewhere else. currentinv would be the inventory items aspect of the inventory reader, targetlist would be a proxy where you can insert the list of items you want placed in the chest, exactly, and no more. my haskell is a bit rusty, but i think this would work. maybe there's a different way to do this, but as far as i can tell, it isn't possible to do the haveenough part because the item parameter is used twice. so, my request is this: let us make functions. let us make parameter cards, and then make a function by inserting the parameter cards and the result card. parameter cards can be duplicated and then used in multiple places. also, if the result card refers to a parameter card that's not included in the function, it should still be able to be used inside another function. or in other words, don't prevent constructing the function if all the parameters are not included. functions would also be useful to make composing operators easier. point-free style is not intuitive for most people.