 URL : "https://github.com/SoftwareEngineeringDaily/sedaily-feed-service/issues/8" TITLE : model user interests BODY : add interests to the user model a user is interested in different types of entities: tags, other users, etc... for the first version, let's just handle tags. every episode model has tags associated with it https://github.com/softwareengineeringdaily/software-engineering-daily-api/blob/6b46ee28b91ba64bc1dc1e50b44cbb58b62f5e64/server/models/tag.model.js . these are concepts like graph databases , companies like apple , and people like justin kan . tags are a simple way of giving metadata to objects in our system. add to the user model https://github.com/softwareengineeringdaily/software-engineering-daily-api/blob/6b46ee28b91ba64bc1dc1e50b44cbb58b62f5e64/server/models/user.model.js : interests : { tag_interests : { tag_id : weight } } weight represents how interested the user is in that tag. calculate user interests for each user, assume we have a history of each episode they have listened to, and what percentage of the episode they listened to. we currently store this data in firebase, but are working on getting it into mongo https://github.com/softwareengineeringdaily/software-engineering-daily-api/issues/53 . the data will look like this: user : { listen_history: { episode_id : percentage_listened } } the algorithm for calculating user interests: for each user: create a map listened_tag_weights {tag : tag_sum, tag_instances } for each episode the user has listened to: for each tag associated with the episode: tag_sum += percentage_listened tag_instances++ // update the users interests tag_interests after 7 is complete, we can use this match a user with links they are interested in.