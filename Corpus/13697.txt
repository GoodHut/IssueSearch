 URL : "https://github.com/zzz6519003/blog/issues/87" TITLE : wrap up 7-lang 1 BODY : the current “king of the hill” is object orientation, typically in the java language. this programming paradigm has three major ideas: encapsulation, inheritance, and polymorphism. you could actually say that prototype languages are a subset of object- oriented languages, your examples were often shorter and simpler than the object-oriented counterparts because you had a broader range of tools for composing programs than you did in the object-oriented paradigm. with pure functional languages, we could not build programs with mutable state. instead, we built monads that let us compose functions in a way that helped us structure problems as if they allowed mutable state. haskell has do notation, supported by monads, to solve this problem. we used the list monad to compute a cartesian product and unlock a combination erlang -module translate_service . -export loop/0, translate/2 . loop -> receive end. {from, casa } -> from ! house , loop ; {from, blanca } -> from ! white , loop ; {from, _} -> from ! i don't understand. , loop translate to, word -> to ! {self , word}, receive translation -> translation end. the pattern match allows the programmer to quickly pick out the important pieces of the message without requiring any parsing from the programmer. prolog download prolog/concat.pl concatenate , list, list . concatenate head|tail1 , list, head|tail2 :- concatenate tail1, list, tail2 . we learned that unification makes this program so powerful because it could work in three ways: testing truth, matching the left side, or matching the right side.