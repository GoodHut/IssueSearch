 URL : "https://github.com/gluster/glusterfs/issues/334" TITLE : clean up loc_t BODY : this is one of the few structures that we routinely copy and pass by value instead of refcounting and passing by reference. it is also barely documented, despite its importance, so it's very difficult for new developers to deal with? when are path and name valid? when/where should they be freed? should they be freed separately, or do they in fact point to the same allocated piece of memory? when should one really use the gfid in inode or parent instead of gfid and pargfid ? the one comment for the structure alludes to that but still fails to provide a useful/actionable answer. the point is not to answer the questions here, but to make it so people seeing and using the structure in code will know the answers or not need to . i propose: 1 make loc_t a refcounted structure with lifecycle rules similar to inode_t, fd_t, dict_t, etc. 2 provide functions that provide information about or operate on loc_t structures in a consistent and clear way.