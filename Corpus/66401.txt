 URL : "https://github.com/CORE-POS/IS4C/issues/895" TITLE : modern javascript tools BODY : premise how do people feel about allowing and/or incorporating more modern javascript tools? this could include things like react or vue.js or just es6+ or more exotically elm, angular, etc. the most significant characteristics of what i'm thinking of as modern javascript are: there's a build step to compile or transpile sources into browser-compatible javascript you probably need npm and/or nodejs to handle the compilation/transpilation and dependency management scope i'm thinking of this as an office / backend question for the time being. lots of pages are thoroughly decoupled from one another which creates space to try things and review the results. i'm not proposing a drastic overhaul of any existing code but rather guidelines around incrementally introducing new technologies. end users an end user should never have to run a javascript build process so any artifacts output by compilation/transpilation should be committed to git. developers on the other hand developers inevitably will bump into the build step if they want to edit a page that uses these kind of tools. the goal is to keep this manageable without saying no to all new additions. plugins seem like a reasonable starting point. code within a plugin is typically well-segmented and doesn't introduce new requirements outside that particular directory. plugins could serve as proof of concept for others to review and evaluate before deciding if a given package should be permitted in the main , non-plugin code. i think it's fine if one plugin uses react and another uses vue.js but it'd be more chaotic to have the item editor use react while the batch editor uses vue.js. i think promoting technology beyond plugins can be safely put off for now and revisited if/when proof-of-concept plugins exist. it pre-dates the idea in this issue, but such a plugin would mostly look like mobilelane https://github.com/core-pos/is4c/tree/master/fannie/modules/plugins2.0/mobilelane