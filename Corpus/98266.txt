 URL : "https://github.com/uniVocity/univocity-parsers/issues/132" TITLE : index of annotation@parsed BODY : hi, i've just upgraded from version 2.1.1 to 2.3.0. this causes an usecase to fail which formerly succeeded well. beanlistprocessor<somebean> rowprocessor = new beanlistprocessor<somebean> somebean.class ; csvparsersettings parsersettings = new csvparsersettings ; parsersettings.setprocessor rowprocessor ; parsersettings.setheaderextractionenabled false ; parsersettings.setlineseparatordetectionenabled true ; parsersettings.getformat .setcomment ' ' ; parsersettings.getformat .setdelimiter ';' ; csvparser parser = new csvparser parsersettings ; parser.parse file where somebean public class somebean{ public somebean { super ; } @parsed index = 1 private int ordernr; @parsed index = 3 private string pknr; @parsed index = 6 private int status; } and parsing a file with this line: 0948;960567;0621;06215005852549;20160115;;1;0.000000;;;18;072;03212248/8486748;0;; i get java.lang.arrayindexoutofboundsexception: array index out of range: 6 resulting in com.univocity.parsers.common.dataprocessingexception: unexpected error processing input row 960567, 06215005852549, 1 using rowprocessor com.univocity.parsers.common.processor.beanlistprocessor. internal state when error was thrown: charindex=0, row= 960567, 06215005852549, 1 it seems as parsing reads only the desired 3 columns and in the beanlistprocessor the index from the annotation is used which fails because there are some columns from the original file already filtered out => index out of bounds...!? i think this is a bug, or have i missed something? cheers