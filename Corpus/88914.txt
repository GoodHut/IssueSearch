 URL : "https://github.com/snewt/bnf/issues/12" TITLE : parse could return result BODY : parsing a grammar can fail. currently, if parsing fails an empty grammar is returned and errors are printed to stdout. users would likely be interested in detecting if the parsing failed, but capturing stdout or stderr is not ideal. the code required to currently detect an empty grammar would look something like: rust let grammar = bnf::parse input ; // errors printed to stdout if grammar.productions.is_empty { println! empty grammar ; } else { println! non-empty grammar ; } instead of printing error strings to stdout or stderr, they could be included in the result<grammar,error> type, allowing for more traditional error handling: rust let grammarresult = bnf::parse input ; match grammarresult { ok grammar => println! working grammar: {} , grammar , err e => eprintln! grammar parsing failed: {} , e , } if this change were to be made, would reporters still be involved? as a library it seems strange to output to stdout or stderr instead of output being handled in the code. but as a command line tool, error reporting in terminal is definitely valuable. maybe bnf should include an optional cli binary intended for terminal use? i forget if cargo allows for dual binary & library crates.