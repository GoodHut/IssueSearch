 URL : "https://github.com/CityOfZion/neon-js/issues/37" TITLE : api / rpc refactor BODY : this refactor will split the neondb's api methods away from neo rpc methods, allowing this library to be more flexible and less biased. neondb's methods can be seen as examples on how to use neonjs methods. rpc - exposed as neon.rpc or import {rpc} from 'neon-js - rpcclient - class pointing towards a specific neo node. instantiate with node url optional version can be used to guard against new implementation methods - has rpc methods implemented using query class. eg. client.getblock 1 - accepts a custom rpc request through client.query customrequest . - accepts a custom query through client.execute customqueryobject - contains history of past queries made, accessed through client.history - query - class to serve as wrapper around request and response. - attach a parser method with parsewith parsingmethod to parse the response. - has static rpc methods for quick init. eg query.getblock 1 is equivalent to new query {method: 'getblock, params: 1 } - quick querying without rpcclient : query.getblock 1 .execute 'https://seed1.neo.org:10332 api - exposed as import {api} from 'neon-js' - neondb - shift all methods for neon wallet to here. - separation of custom logic from general logic makes the library more readable. i always mess up getapiendpoint with getrpcendpoint - api folder can contain other apis from external sources eg. coinmarketcap for prices?