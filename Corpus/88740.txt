 URL : "https://github.com/gilbert/es-pipeline-operator/issues/46" TITLE : operator overload instead BODY : what about instead of one fixed operator add a way to add function that map to operator that is a symbol tadded to the objects. it will execute left hand side function for the operator. i can be something like javascript let pipe = symbol '|>' ; number.prototype pipe = function value, fn { return fn value ; }; and the operators can be executed from left to right like reduce. the list of operators that are supported can be in some repository so you will need to register the symbol first to use it. javascript window.registeroperator pipe ; that way a user may implement + operator for it's own objects like: javascript function foo a, b, c { this.a = a; this.b = b; this.c = c; } foo.prototype.tostring = function { return <a: + this.a + , b: + this.b + , c: + this.c + > ; }; let plus = symbol + ; window.registeroperator plus ; foo.prototype plus = function x, y { return new foo x.a + y.a, x.b + y.b, x.c + y.c ; }; x = new foo 1,2,3 ; y = new foo 2,3,4 ; z = x + y; console.log z ; //> <a:3, b:5, c:7>