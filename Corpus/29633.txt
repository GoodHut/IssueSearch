 URL : "https://github.com/carllerche/mio/issues/575" TITLE : memory leaks in mio BODY : hi - i'm compiling a hybrid c++ / rust program. the c++ parts are being built with asan, and the overall executable is being linked with the asan runtime. rust has been configured to use system malloc rather than its own jemalloc. when i run rust unit tests, asan or more accurately, lsan - leak sanitizer is turning up minor leaks coming from mio: indirect leak of 64 byte s in 1 object s allocated from: 0 0x561f4545d628 in malloc async-compression-unittest+0x164628 1 0x561f4534d395 in alloc::heap::allocate rust/1.16/src/rust/src/liballoc/heap.rs:59 2 0x561f4534d395 in alloc::heap::exchange_malloc rust/1.16/src/rust/src/liballoc/heap.rs:138 3 0x561f4534d395 in alloc::boxed::{{impl}}::new<mio::poll::readinessnode> rust/1.16/src/rust/src/liballoc/boxed.rs:236 4 0x561f4534d395 in mio::poll::registration::new2::h097cad214d6ed8ca mio/src/poll.rs:1397 5 0x561f4534635d in tokio_core::reactor::core::new::h3fac881b0d5ffd2c tokio-core/src/reactor/mod.rs:158 6 0x561f45329c10 in async_compression_unittest::test::check_roundtrip::h0e4e8c99f44e7cc5 async-compression/src/test.rs:43 i haven't looked into what these are yet, but they're annoying our test infrastructure. the other leak is: indirect leak of 56 byte s in 1 object s allocated from: 0 0x561f4545d628 in malloc async_compression_unittest+0x164628 1 0x561f4534c02e in alloc::heap::allocate rust/1.16/src/rust/src/liballoc/heap.rs:59 2 0x561f4534c02e in alloc::heap::exchange_malloc rust/1.16/src/rust/src/liballoc/heap.rs:138 3 0x561f4534c02e in alloc::arc::{{impl}}::new<mio::poll::readinessqueueinner> rust/1.16/src/rust/src/liballoc/arc.rs:229 4 0x561f4534c02e in mio::poll::{{impl}}::new mio/src/poll.rs:1883 5 0x561f4534c02e in mio::poll::poll::new::ha8670d16ae332fb2 mio/src/poll.rs:611 6 0x561f45346302 in tokio_core::reactor::core::new::h3fac881b0d5ffd2c tokio-core/src/reactor/mod.rs:157