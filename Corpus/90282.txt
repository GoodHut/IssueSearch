 URL : "https://github.com/jemalloc/jemalloc/issues/743" TITLE : segv in je_rtree_val_read BODY : under a heavy load, my server program which uses jemalloc causes segmentation fault. i see various patterns of the back trace of core files, but the top portion of the stack are common as following. gdb bt 5 0 je_rtree_val_read rtree=<optimized out>, dependent=true, elm=<optimized out> at include/jemalloc/internal/rtree.h:200 1 je_rtree_get dependent=true, key=0, rtree=<optimized out> at include/jemalloc/internal/rtree.h:325 2 je_chunk_lookup dependent=true, ptr=0x0 at include/jemalloc/internal/chunk.h:89 3 huge_node_get ptr=0x0 at src/huge.c:11 4 je_huge_dalloc tsdn=0x2b689ef57690, ptr=0x0 at src/huge.c:424 more stack frames follow... unfortunately my understanding on the internal structure of jemalloc is very poor, but it looks like that the program is trying to access chunks_rtree.levels 2 .subtree whereas it seems invalid. gdb f 2 2 je_chunk_lookup dependent=true, ptr=0x0 at include/jemalloc/internal/chunk.h:89 89	include/jemalloc/internal/chunk.h: no such file or directory. gdb p chunks_rtree.levels 0 $21 = {{subtree_pun = 0x0, subtree = 0x0}, bits = 16, cumbits = 16} gdb p chunks_rtree.levels 1 $22 = {{subtree_pun = 0x2b6892e30080, subtree = 0x2b6892e30080}, bits = 16, cumbits = 32} gdb p chunks_rtree.levels 2 $23 = {{subtree_pun = 0x1, subtree = 0x1}, bits = 16, cumbits = 48} gdb p chunks_rtree.levels 3 $24 = {{subtree_pun = 0x0, subtree = 0x0}, bits = 0, cumbits = 0} it looks like a defect. but if it can be avoided by some configuration option at build time, i will be happy to try it. i'm using jemalloc 4.5.0 on redhat7. let me know if there's anything i can provide furthermore.