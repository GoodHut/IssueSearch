 URL : "https://github.com/caffe2/caffe2/issues/683" TITLE : operator registry keys BODY : the following c++ code will fail to run: caffe2::deviceoption option; option.set_device_type caffe2::cuda ; caffe2::cudacontext context option ; caffe2::operatordef reludef; reludef.set_name relu ; reludef.add_input x ; reludef.add_output y_pred ; reludef.set_type relu ; reludef.mutable_device_option ->set_device_type caffe2::cuda ; workspace.runoperatoronce reludef ; the reason for this is that the cuda operator registry does not contain a relu operator, but only a relu_engine_cudnn operator. several other operators also only have an _engine_cudnn registered. if i use reludef.set_type relu_engine_cudnn ; it does work. for auto & key : caffe2::gdevicetyperegistry ->at caffe2::cuda ->keys std::cout << key << std::endl; partial result: <img width= 315 alt= relu src= https://cloud.githubusercontent.com/assets/26622572/26506244/1e8fc4a2-424c-11e7-860c-0a7e53687c79.png > is this working as intended? and does this mean that if i create a network in python which interleaves conv and normal relu operators since relu_engine_cudnn does not appear in the operator catalogue that it will copy data back and forth from the gpu to the cpu to perform the relu operation? i'm on windows by the way, and had to jump through a few hoops to get operators linked in /wholearchive crashes the compiler so i link obj files directly , but i don't suppose that's causing this.