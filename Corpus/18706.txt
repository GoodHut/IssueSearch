 URL : "https://github.com/asdine/storm/issues/128" TITLE : uniqueness of ids BODY : hello, i'm a quite recent user of storm thanks for this great project : and i have a question about the ids and their uniqueness. i write the following code to show my issue: go import github.com/asdine/storm type user struct { id string storm: id name string } func main { db, _ := storm.open my.db user := user{ id: 42 , name: fortytwo , } db.save &user // ← ok db.save &user // ← also ok, does not return storm.erralreadyexists =/ } why does the second method does not throw an error? considered id as a primary key, i will expect that the second save would not be done if the id is the same as before. is this behavior normal? i notice that save updates the previous structure in the database, like the update method. can the behavior of save be different of update in this way? or maybe have a insert method to follow the primary key constraint?