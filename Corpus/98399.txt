 URL : "https://github.com/AdamsLair/duality/issues/514" TITLE : introduce a build pipeline BODY : summary building a duality game publish game is currently a very hardcoded process. replace this with an extensible, modular build process that is configurable via the editor. analysis - the new build process should consist of a series of operations that are performed on the game data and binaries. - every build step is represented by a user class that implements an interface https://github.com/adamslair/duality/blob/d3986d43edadaba41ea1bf6dd8edeaec3cb37f1d/source/editor/dualityeditor/assetmanagement/iassetimporter.cs . each should be as self-contained as possible with the least possible shared state. - the current build process can be refactored to form the following build steps: - copy to target directory, filtered with a blacklist. - move to subdirectory, create batch file to run. - zip target directory. - on the editor side, the build dialog should allow free editing of the list of build steps, including adding, removing, reordering or configuring steps. - allow to maintain multiple distinct build configurations. - the set of available build steps can be derived from all available types in all editor plugins. - things that additional build steps could potentially do: - use il magic to merge all assemblies and plugins into one. - crawl all scenes to apply prefabs and then remove their links to improve load times. - crawl all scenes to perform additional optimization, like static batching or similar. - run third-party tools for deployment on other platforms. - ...