 URL : "https://github.com/AnanyaKumar/cooperative_learning/issues/4" TITLE : neural net interface BODY : for each car c, we want the k closest cars. for each of these cars we want the relative velocity x and y component and relative position x and y component . so we will get an input vector of size 4k pos_x1, pos_y1, vel_x1, vel_y1, pos_x2, pos_y2, ... . this then gets fed into a randomly initialized neural net with fully connected hidden layers which has 4 outputs: mean and std-dev of acceleration in x and y direction. the final layer would be linear, except for standard deviations there's usually an exponential activation so it doesn't get negative. this is plugged into a gaussian distribution to generate 2 values per car: acceleration x and y. the controls for the cars should be concatenated into a 2d np array, and given to the environment. if the neural net stuff is tricky, for now let's at least do the input and output preprocessing so all we need to do is build the neural net and train it :