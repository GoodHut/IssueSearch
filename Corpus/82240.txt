 URL : "https://github.com/npryce/hamkrest/issues/38" TITLE : add on library for guava? BODY : guava has a bunch of it's own collection types. it would be really cool if there was a hamkrest-guava library that added matchers for these types. some of the matchers that i've written up for my own use case are these: kotlin fun <k> haskey element: k : matcher<multimap<k, >> = object : matcher.primitive<multimap<k, >> { override fun invoke actual: multimap<k, > : matchresult = if actual.containskey element { matchresult.match } else { matchresult.mismatch was ${describe actual } } override val description: string get = contains key ${describe element } override val negateddescription: string get = does not contain key ${describe element } } fun <v> hasvalue element: v : matcher<multimap< , v>> = object : matcher.primitive<multimap< , v>> { override fun invoke actual: multimap< , v> : matchresult = if actual.containsvalue element { matchresult.match } else { matchresult.mismatch was ${describe actual } } override val description: string get = contains value ${describe element } override val negateddescription: string get = does not contain value ${describe element } } fun <k, v> contains key: k, value: v : matcher<multimap<k, v>> = object : matcher.primitive<multimap<k, v>> { override fun invoke actual: multimap<k, v> : matchresult = if actual.containsentry key, value { matchresult.match } else { matchresult.mismatch was ${describe actual } } override val description: string get = contains key ${describe key } with value ${describe value } override val negateddescription: string get = does not contain key ${describe key } with value ${describe value } }