 URL : "https://github.com/billba/prague/issues/2" TITLE : overly verbose typing BODY : consider this: typescript first rule matchregexp /i am . / , match => match.reply hi, ${match.groups 1 } , ... what type is match ? all we really know is that it's the input type to matchregexp plus iregexpmatch , which is to say that matchregexp adds groups to the input type. but as to the overall type, and thus e.g. the type of match.reply , we've got nothing, because we don't specify the input type to rule . which, by the way, is the answer for now: typescript first<yourtypehere> rule<yourtypehere> matchregexp /i am . / , match => match.reply hi, ${match.groups 1 } , ... there are two things we'd like to be able to do here to make things more concise. the first is to be able to infer the type of rule by setting it in the enclosing first : typescript first<yourtypehere> rule matchregexp /i am . / , match => match.reply hi, ${match.groups 1 } , // type is not named, so infer it to be yourtypehere ... that this does not work is typescript issue 15680 https://github.com/microsoft/typescript/issues/15680 . the other is to create typed shorthands for the helpers: const f = first<yourtypehere>, r = rule<yourtypehere>; f r matchregexp /i am . / , match => match.reply hi, ${match.groups 1 } , .... that this does not work is typescript issue 15877 https://github.com/microsoft/typescript/issues/15877 until one or both of these suggestions is implemented, we're just going to be a little less concise than i would prefer if you want typing, which i do. if you leave it out then match will always be any , which is no worse than working in plain old javascript...