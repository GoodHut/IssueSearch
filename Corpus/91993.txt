 URL : "https://github.com/nafeu/gryt-focus/issues/7" TITLE : use redux sagas for timer BODY : there are multiple violations of the redux paradigm of only change the state atom through reducers. here is one example: https://github.com/nafeu/gryt-focus/blob/bd629a896402c5d9a924a25312d1a6f4b394451e/client/src/components/timer.js l46 inittimerinterval { let timerinterval = setinterval this.tick, 1000 this.setstate {timerinterval} <<<<<<<<<<< } basically this timer component is impure and has side-effects when included. components in react should be dumb and side-effect free. they may have state but if they do it is internal to the component such as a date-picker. they must never modify the state atom directly. reducers are the only function that may modify state. and that too they don't actually modify the state but rather return a new one as a reaction to an action that is dispatched, maintaining their functional purity. given that, a component may dispatch an action as an intention to replace the state with a new state. that is its only way. this dispatch usually happens as a result of user interaction so once again it is really not the component but rather the user. for side-effects such as timers, we can use the saga pattern, specifically the redux-saga library. this takes the side-effects out of the core of the redux-react app and put them on the edges of the system, leaving a functionally pure core. for a really good blog post on this topic, check out a previous colleague of mine who wrote this: https://jaysoo.ca/2016/01/03/managing-processes-in-redux-using-sagas/ the end result of using sagas is a cleaner, simpler, easier to reason about timer functionality in this frontend app.