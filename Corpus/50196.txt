 URL : "https://github.com/viphat/til/issues/266" TITLE : what is anti-patterns BODY : if we consider that a pattern represents a best practice, an anti-pattern represents a lesson that has been learned. there are two notions of anti-patterns that are presented. anti-patterns:
- describe a bad solution to a particular problem which resulted in a bad situation occurring.
- describe how to get out of said situation and how to go from there to a good solution. while it's quite important to be aware of design patterns, it can be equally important to understand anti-patterns. when creating an application, a project's life-cycle begins with construction however once you've got the initial release done, it needs to be maintained. the quality of a final solution will either be good or bad, depending on the level of skill and time the team have invested in it. here good and bad are considered in context - a 'perfect' design may qualify as an anti-pattern if applied in the wrong context. the bigger challenge happen after an application has hit production and is ready to go into maintenance mode. a developer working on such a system who hasn't worked on the application before may introduce a bad design into the project by accident. if said bad practices are created as anti-patterns, they allow developers a means to recognize these in advance so they can avoid common mistakes that can occur - this is parallel to the way in which design patterns provide us with a way to recognize common techniques that are useful. to summarize, an anti-pattern is a bad design that is worthy of documenting. it is difficult in achieving a good balance between good design structure and good context.