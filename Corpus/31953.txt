 URL : "https://github.com/replicaJunction/PSJira/issues/79" TITLE : testing of typename BODY : the same code is used across multiple tests to check the type names of various objects. would be good to refactor this to a common function to make maintenance of this check simpler. also good to agree a consistent approach to checking; see below for some examples with comments. function assert-hastypename { cmdletbinding param parameter mandatory string $typename , parameter mandatory, valuefrompipeline psobject $inputobject process { $inputobject.psobject.typenames 0 | select-object -unique | should be $typename nb: works but only if the typename is the first in the list $inputobject.psobject.typenames | should contain $typename nb: pester uses contain for files; not arrays. $typename | should bein $inputobject.psobject.typenames nb: this works, but is yodad i.e. expected and actual are switched $inputobject.psobject.typenames | ?{$_ -eq $typename} | should be $typename nb: works but the but was value is blank, rather than a list of the property's typenames $inputobject.psobject.typenames.contains $typename | should be $true nb: works but the expected and actual values listed as true/false instead of actual typenames $inputobject.psobject.typenames -contains $typename | should be $true nb: same as previous $inputobject | get-member .typename | select-object -unique | should be $typename nb: works but only if the typename is the first in the list } } string $demotypename = 'demo' psobject $x = new-object -typename psobject -property @{hello= world } $x.psobject.typenames.add $demotypename nb: this would fail most tests as the target typename is not the first typename listed $x.psobject.typenames.insert 0, $demotypename $x | assert-hastypename $demotypename