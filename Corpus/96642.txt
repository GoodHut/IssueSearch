 URL : "https://github.com/pmem/issues/issues/676" TITLE : feat: pool size statistics BODY : pool size statistics rationale to complement the manual mode of pool grow mention in the 382, the user needs the ability to tell when to call the function to increase the size of the pool. description the answer to the question how much free space is left in the pool is difficult. one has to consider that objects are not linearly arranged in the heap, which means that there's simply no single region of free space but many small regions that are continuously being tracked by the allocator. even if we assume that the total amount of free space is a good enough measure, counting that free space is still very time consuming and potentially racey operation. and even if we return a value, that value might be invalid right after we finish calculating, because other threads might be allocating memory. still, a rough estimate of free space might be useful for administrative tasks. for this purpose, we will expose a api that will return the ratio of the sum of sizes of allocated objects to the current size of the heap. api changes there will be two new ctl entry points: - heap.stats.current.allocated_pct - the ratio of allocated size to the heap size. for current instance of the application. - heap.stats.total.allocated_pct - same as above, but for the entire life of the heap. implementation details the sum of sizes of allocated objects will be tracked in runtime by the means of atomic increment, and will be eventually persisted in the pool. this is a trade-off between accuracy and time complexity of the statistic gathering. the eventual nature of the persistent statistic means that it might drift over time if crashes often happen at unfortunate times. initially, there will be no mechanism to correct for that drift.