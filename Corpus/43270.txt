 URL : "https://github.com/crystal-lang/crystal/issues/5271" TITLE : consider the immex gc BODY : i came across a gc called immex that is very new and wanted to bring it to the attention of the crystal community. immex was written by contributors of the scalla-native project, which aims to compile scala to native code via llvm as a backend, like crystal. also like crystal, they originally opted to use the bhgc during their initially implementation, but made plans to explore other options. why should the crystal community pay attention to this gc? look at these benchmarks. ! image https://user-images.githubusercontent.com/22247793/32643637-8a76cf1c-c591-11e7-8ea0-adda0b4c16ca.png it appears as though for smallish heap sizes the immex algorithm comes very close to the performance of not having a gc running at all. which seems amazing to me although i don't know much about the subject . i listened to some talks by the scala-native lead developer and he said that since this is based on an algorithm that was developed in 2008, it is more state of the art than algorithms being used in the vast majority of garbage collectors. they still are using boehm by default but plan to switch to immex soon as it gains some maturity. you can see the source for immex here: https://github.com/scala-native/scala-native/tree/master/nativelib/src/main/resources/gc/immix and in these two files you can see that they define an identical interface for both boehm and immex, that is not to far off from the apis crystal uses from boehm. https://github.com/scala-native/scala-native/blob/master/nativelib/src/main/resources/gc/immix/immixgc.c https://github.com/scala-native/scala-native/blob/master/nativelib/src/main/resources/gc/boehm/gc.c