 URL : "https://github.com/numworks/epsilon/issues/75" TITLE : gcd 10^10,5 returns undef BODY : it can be fixed by using long long instead of int overflow happens for integers larger than 2^63 instead of 2^31 , with the following code in poincare/src/great_common_divisor.cpp template<typename t> evaluation<t> greatcommondivisor::templatedevaluate context& context, angleunit angleunit const { evaluation<t> f1input = m_args 0 ->evaluate<t> context, angleunit ; evaluation<t> f2input = m_args 1 ->evaluate<t> context, angleunit ; t f1 = f1input->toscalar ; t f2 = f2input->toscalar ; delete f1input; delete f2input; if isnan f1 || isnan f2 || f1 != long long f1 || f2 != long long f2 { return new complex<t> complex<t>::float nan ; } long long a = f2,b = f1,r; while b!=0 { r = a % b; a = b; b = r; } if a<0 a=-a; // insure positive gcd if b=0 return new complex<t> complex<t>::float std::round t a ; }