 URL : "https://github.com/ggez/ggez/issues/111" TITLE : text leaks memory BODY : examples: rust extern crate ggez; extern crate rand; use rand::{rng, thread_rng}; use ggez::conf; use ggez::event; use ggez::{gameresult, context}; use ggez::graphics; use std::time::duration; struct mainstate { font: graphics::font, } impl mainstate { fn new ctx: &mut context -> gameresult<mainstate> { let s = mainstate { font: graphics::font::new ctx, /dejavuserif.ttf , 48 ?, }; ok s } } impl event::eventhandler for mainstate { fn update &mut self, _ctx: &mut context, _dt: duration -> gameresult< > { ok } fn draw &mut self, ctx: &mut context -> gameresult< > { graphics::clear ctx ; let str = format! rand: {} , thread_rng .gen_range 0, 6 ; let text = graphics::text::new ctx, &str, &self.font ?; let dest_point = graphics::point::new text.width as f32 / 2.0 + 10.0, text.height as f32 / 2.0 + 10.0, ; graphics::draw ctx, &text, dest_point, 0.0 ?; graphics::present ctx ; ok } } pub fn main { let c = conf::conf::new ; let ctx = &mut context::load_from_conf helloworld , ozkriff , c .unwrap ; let state = &mut mainstate::new ctx .unwrap ; if let err e = event::run ctx, state { println! error encountered: {} , e ; } else { println! game exited cleanly. ; } }