 URL : "https://github.com/munificent/craftinginterpreters/issues/80" TITLE : i'd rather email you... BODY : but there isn't a way to do so, so i'm making this an issue. anyway, in your latest chapter, you say: > you could make a language that treats variable declarations as expressions that both create a binding and produce a value, but iâ€™m not aware of any widely-used languages that do. scheme seems like a contender, but note that after a let expression is evaluated, the variable it bound is forgotten. the define syntax is not an expression. and since i use common lisp every day, i can tell you that you can do this in cl. if you use one of the special forms defvar or defparameter it evaluates the value, and returns the name of the variable, which you can then do more stuff with. like so: common-lisp ? defvar foo 5 foo ? setf bar defvar foo 5 foo ? bar foo otoh you can use setf and it will not only bind, but return the last value you bound like so: common-lisp ? + setf baz 5 6 11 ? baz 5 you can even get fancy and do multiple bindings in a setf : common-lisp ? setf foo 0 bar 0 baz 0 0 ? foo 0 ? bar 0 ? baz 0 ? + setf foo 5 bar 3 baz 2 foo bar 10 ? foo 5 ? bar 3 ? baz 2 now, this is non-standard use of setf , but it is possible. once you read this go ahead and close it. i looked everywhere i could think to find an email address, but alas, i found none... :crying_cat_face: