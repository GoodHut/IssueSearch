 URL : "https://github.com/herumi/mcl/issues/10" TITLE : mapping to g1/g2 BODY : i've looked at the indifferentiable hashing to barreto naehrig curves paper and for fp254bnb the assumption that g 1 = 1 + b is a nonzero quare in fp does not hold, which i assume is the reason why mapping fails for sqrt -3 and -sqrt -3 . i didn't study these proofs closely to see whether the broken assumption leads to other values that will not be mappable. do you know of any? also, what about g2? as a side note, page 3 of the paper has an interesting remark: like icartâ€™s encoding and many others, this encoding f will not yield a gener- ically secure hash function construction if we simply compose it with a ran- dom oracle to the base field e.g. it is easy to distinguish such a hash function from a random oracle to the curve since its image has a simple algebraic de- scription and only contains a constant fraction of all points . however, we show in section 5 that it is well-distributed in the sense of farashahi et al. 17 . this implies that if h1 , h2 are random oracles to the base field, then m -> f h1 m + f h2 m is a good, generically secure hash function to the bn curve it is indifferentiable from a random oracle ; however, it seems this is what bn256_g1_hashandmapto and g2 variant do, i.e. they just hash a message to a value in fp and then map this value to get a point on the curve.