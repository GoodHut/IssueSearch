 URL : "https://github.com/ucb-bar/chisel3/issues/477" TITLE : better testers in chisel3 BODY : the whole tester needs to be specified as a circuit makes writing tests a lot more difficult, especially if your tests are based off timing / sequences rather than properties. this gets really apparent in our chiseltests package, where several tests are disabled because the were written in the peek-poke style and would be really difficult to convert to a pure circuit tester. while chisel-testers has peek-poke style testers, you have to go through the trouble of importing another repository which isn't always published to maven in a timely manner, or perhaps at all , and they can't be used in the chisel3 repository. so we need better testers in this repository. what it can do and what its limitations are can be subject to debate. at minimum: - poke and check functionality specified in a sequential manner - clock and reset when dealing with implicitmodules - wait ... also seems useful - useful debugging messages at minimum, telling you what check ... caused a failure if we want to stick with synthesizable testers, the above api is possible and can be converted to a testevector that generates a circuit that just plays back the testvector. assertions can be passed down, and source information can be recorded with each check and macros can get the contents of the check ... and include it in the assert error string . if we don't care about synthesizability of testers, then a more feature-rich api is possible, including peek commands. but this would mean a radical restructuring of the test system, and goes back to having scala drive a simulator. it would also be nice to be able to specify a backend for the synthesizable testers, provided it is available. the firrtl interpreter runs much faster than verilator, and our chisel test suite is already taking many minutes. of course, unless firrterpter is pulled into chisel3, this would mainly be having a backend hook and api in the testing framework.