 URL : "https://github.com/otland/forgottenserver/issues/2300" TITLE : lua network message poll BODY : i have this special question to @djarek and i'm making it here so more people can enjoy the answer for this question. suppose i have several functions like https://github.com/otland/forgottenserver/blob/master/data/lib/core/player.lua l69 and i use them a lot in my server. its an ideal to move a lot of systems to lua and it may have a lot custom packets that may be used a lot otclient for a custom server for an example . the current network stack thanks @djarek uses a poll that keeps a limited amount of memory that have been allocated by outputmessage. its prevents the system to allocate/deallocate the 20k bytes that are required by outputmessage all time and saving dispatcher cycles which is always good . i'm thinking in building a lua pool that keeps a limited amount of networkmessage that will be used in functions like player:sendextendedopcode. when the function needs a new networkmessage, the poll will check if there is any available in the list. if there is none, a new one will be created with a call to networkmessage . when the function is done with the networkmessage, it will be added back to the list to prevent deallocation. i'm thinking how much performance i can gain with that. the dispatcher time is precious its why we must look for optimizations. at the same time, in my development computer it took 1 microsecond to allocate the new networkmessage/1-3 micro seconds to execute the whole luanetworkmessagecreate/0-1 micro seconds to execute luanetworkmessagedelete. we should also not forget about all the costs to calling the c++ function from lua. its worth to build this lua poll if we want a server that handle a lot of players? ps: i'm using std::chrono::high_resolution_clock::now to calculate how look it takes to execute the allocation.