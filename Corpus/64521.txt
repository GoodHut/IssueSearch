 URL : "https://github.com/tuyy/JavaStudy/issues/7" TITLE : gof의 디자인 패턴 BODY : 서론 패턴이 어떻게 문제를 해결하는지 파악하고 각 패턴의 의도를 정확히 파악하자. 총 23개의 패턴이 들어있으며 패턴은 목적으로 구분하면 생성 5 , 구조 7 , 행동 11 으로 나뉜다. 장점, 단점을 정리하기 보단 의도와 목적을 정리한다. 생성패턴 공통적으로 객체 생성을 분리한다. abstract factory, factory method, builder, singleton, prototype 패턴이 있다. abstract factory 객체를 '군'으로 관리하기 위해 사용한다. <img width= 572 alt= 2017-04-29 3 19 44 src= https://cloud.githubusercontent.com/assets/13283116/25553494/6d5c002c-2cef-11e7-923a-f1be4085171c.png > factory method 객체생성을 서브클래스에게 위임한다. 템플릿메소드 패턴의 생성버전이다. 상속의 안좋은 예 public abstract class 라면 { public void 끓이다 { 라면 = create라면 ; 라면.보글보글 ; } // 팩토리메소드 abstract 라면 create라면 ; } public class 신라면 { 라면 create라면 { return new 신라면 ; } } builder 복잡한 객체를 생성하는 방법과 표현하는 방법을 정의하는 클래스를 별도로 분리하여 서로 다른 표현이라도 이를 생성할 수 있는 동일한 절차를 제공할 수 있도록 한다. <img width= 689 alt= 2017-04-29 4 44 24 src= https://cloud.githubusercontent.com/assets/13283116/25553915/21964e2a-2cfb-11e7-877e-cd447c0db16f.png > singleton 한 클래스에 대한 인스턴스를 유일하게 만들어준다. 싱글쓰레드와 멀티쓰레드일 때 구현이 다르다. public class abc { private abc instance; private abc {} public static abc getinstance { if instance == null { instance = new abc ; } return instance; } } prototype 원형이 되는 인스턴스를 사용하여 생성할 객체의 종류를 명시하고, 이렇게 만든 견본을 복사해서 새로운 객체를 생성한다. 원형이 되는 인스턴스는 clone 함수를 제공해야한다. 객체생성비용이 높은 경우 사용한다. 자바에선 cloneable 사용 <img width= 820 alt= 2017-04-29 5 20 15 src= https://cloud.githubusercontent.com/assets/13283116/25554096/256cc9d4-2d00-11e7-81ca-d4bc9aac3fed.png >