 URL : "https://github.com/unicorn-engine/unicorn/issues/909" TITLE : more pythonic bindings BODY : hello all, i recently started a similar project that i have integrated into the bindings directly https://github.com/jake-r/unicorn and i'm looking for some feedback on the interface and/or implementation. the interface is a superset of the old one with the following new features: python from unicorn import arm64 mu = arm64.arm64el_arm mapping memory mu address = 2 1024 1024 i don't really like this, any suggestions? writing to memory: mu address = arm64_code reading memory: mem = mu address:address+len arm64_code reading a register x11 = mu.reg.x11 writing a register: mu.reg.x11 = 0x12345678 hooking @hook.block def hook_block uc, address, size, user_data : print >>> tracing basic block at 0x%x, block size = 0x%x % address, size or mu.hook.block hook_block the bindings are generated by looking at the values in {}_const modules and inserting them into a jinja2 template. i haven't done a ton of testing for speed but it seems like the performance impact is pretty minimal since there is only the overhead of __get__/__set__ and __getitem__/__setitem__ . replicating @lunixbochs 's test i got: magic: 4.411244699997042 native: 3.900663774998975 magic: 4.60627108799963 native: 3.8136738930006686 magic: 4.460894711999572 native: 3.8876221419996 are there any other features you would like to see? would you change anything about the implementation? if you want to try it out i've found that the easiest way to install it is with sudo -h pip3 install -e 'git+https://github.com/jake-r/unicorn.git egg=unicorn&subdirectory=bindings/python'