 URL : "https://github.com/commandlineparser/commandline/issues/127" TITLE : support for commands BODY : <a href= https://github.com/fleed ><img src= https://avatars0.githubusercontent.com/u/2131800?v=4 align= left width= 96 height= 96 hspace= 10 ></img></a> issue by fleed https://github.com/fleed _friday mar 31, 2017 at 04:24 gmt_
_originally opened as https://github.com/gsscoder/commandline/issues/434_ ---- is there any existing way to define commands , intended as classes to execute specific options? if not, any plan to add support? i would expect something like this, removing lot of the ceremony required to configure the option and run the related logic: example: csharp class commitcommand : command<commitoptions> { public int execute commitoptions options { // execute return 0; } // alternative public int execute { // access options as property in asynccommand base var file = this.options.file; // execute return 0; } } class uploadcommand : asynccommand<uploadoptions> { public async task<int> executeasync commitoptions options { // execute return 0; } // alternative public async task<int> executeasync { // access options as property in asynccommand base var file = this.options.file; // execute return 0; } } // program.cs var parser = new commandparser ; var parserresult = parser.parse args ; var result = parserresult.executecommand ; in general i'd like the possibility to discover options and commands through reflection, something similar to manyconsole .