 URL : "https://github.com/timmolter/XChange/issues/1632" TITLE : effective rate limiting BODY : i'm finding that i'm exceeding rate limits occasionally. has anyone got an effective way of dealing with them? i see there s a nice little ratelimiter class in guava. but i think to use it properly it has to be baked in at the lowest level where the restproxyfactory is invoked. it needs to be applied at the request level, and shared across the accountservice, tradeservice and marketdataservice. wrapping the services in another _rate limiting_ proxy might work. something like this: protected therockaccountserviceraw exchange exchange { super exchange ; exchangespecification spec = exchange.getexchangespecification ; this.apikey = spec.getapikey ; this.signaturecreator = new therockdigest spec.getsecretkey ; therockauthenticated theapi = restproxyfactory.createproxy therockauthenticated.class, spec.getssluri ; ratelimiter ratelimiter = spec.ratelimiter ; if ratelimiter != null { this.therockauthenticated = ratelimit theapi, ratelimiter, therockauthenticated.class ; } else { this.therockauthenticated = theapi; } } private static <api> api ratelimit api theapi, ratelimiter ratelimiter, class<api> theclass { return api proxy.newproxyinstance classloader.getsystemclassloader , new class {theclass}, new invocationhandler { @override public object invoke object proxy, method method, object args throws throwable { ratelimiter.acquire ; return method.invoke theapi, args ; } } ; } ... @timmolter thoughts?