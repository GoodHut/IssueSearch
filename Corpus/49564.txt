 URL : "https://github.com/Microsoft/TypeScript/issues/15709" TITLE : type inference issues BODY : <!-- bugs: please use this template. --> typescript version: 2.3.2 code ts interface itype { typename: string; } interface iroom { roomtype: itype; } type deeppartial<t> = { p in keyof t ?: t p | deeppartial<t p > & object }; // ts doesn't complain about t1 being assigned to roomtype const t1: { a: number } = { a: 0 }; const r1: deeppartial<iroom> = { roomtype: t1 }; // here it says that {a: number} cannot be assigned to the type i specified const t2: itype | deeppartial<itype> & object = { a: 0 }; const r2: deeppartial<iroom> = { roomtype: t1 }; // now it's not ok? but this was accepted for r1 const r3: deeppartial<iroom> = { roomtype: { a: 0 } }; expected behavior: it should warn about the assignment to r1 as it does in r3 . actual behavior: typescript does not warn me of a mistake when we declare r1 . in the declaration of r3 it even says that {a: number} cannot be assigned to itype | deeppartial<itype> & object . why doesn't it say the same thing for r1 in which i have provided t1 of type { a: number } ?