 URL : "https://github.com/xenomachina/kotlin-argparser/issues/25" TITLE : add support for subparsers BODY : python's argparse has the useful ability to specify subparsers https://docs.python.org/3/library/argparse.html sub-commands . would you be willing to add similar functionality here? the api might look something like this: kotlin fun <t> argparser.subparser help: string, factory: argparser -> t : argparser.delegate<t?> { ... } class subparserone parser: argparser { val argone by parser.flagging help = help } class subparsertwo parser: argparser { val argtwo by parser.flagging help = help } class myargparser parser: argparser { val foo: boolean by parser.flagging help = foo val commandone: subparserone? by parser.subparser help = sub command { subparserone it } val commandtwo: subparsertwo? by parser.subparser help = sub command { subparsertwo it } } if the sub command for a subparser is given on the command line, then the factory would be called. the delegates on the subparser would then handle the rest of the command line arguments. if a subparser isn't called, then it's delegate would be null. this doesn't enforce that the object returned by the factory actually declares and delegates. i don't think that's a big deal, because you can create subparsers without arguments in python as well. this design also takes care of the convention in python of passing a function to set_defaults that will be called if the subparser is invoked. with this design, you could put that login in an init block after your property declarations.