 URL : "https://github.com/onmyway133/blog/issues/18" TITLE : dealing with singleton BODY : a single singleton there are many classes that designed to be used as singleton, like userdefaults.standard , filemanager.default , notificationcenter.default or even our own classes like usermanager , storage , ... singleton is a design patter and has its own use case, sometimes we still need to use it. but if we are to use singleton, we should just use 1, and group all other singleton under this single singleton. thanks to vadym https://github.com/vadymmarkov/ for showing this to me usually we call it app , swift makes it extremely easy to make singleton swift struct app { static let model = appmodel static let realmprovider = realmprovider static let networkingprovider = networkingprovider static var navigator = navigator static let config = appconfig static let pushnotificationcenter = pushnotificationcenter static let lifecycle = lifecycle } then we have a single point of control for all the singletons inject a singleton sometime we rely on a singleton to do our job, to make dependencies clear and testing easier, we need to inject this singleton, and leverage swift default parameter, thanks to john https://github.com/johnsundell for showing this to me here is an example of a viewmodel that relies on networking swift class profileviewmodel { let networking: networking<apiendpoint> init networking: networking<apiendpoint> = app.networking { self.networking = networking networking.rxrequest apiendpoint.profile .bindnext { profile in print profile } } }