 URL : "https://github.com/reactor/reactor-core-dotnet/issues/8" TITLE : make imono awaitable BODY : this is only an idea: as imono<> essentially represents an eventually received value, it makes it quite close in mind to what task<> can do. to increase interoperability with existing .net code, it could implement custom awaiter methods and allow to be returned directly from async/await code. c allows to build custom awaiters using indirect api, which could be consolidated into two interfaces representing iterator pattern and implemented by task : csharp interface imono<t> { imonoawaiter<t> getawaiter ; } interface imonoawaiter<t> : inotifycompletion { bool iscompleted { get; } void oncompleted action continuation ; t getresult ; } // use public async imono<int> compute { return mono.from => 1 ; } this way you can not only build monos from tasks, but also be able to use monos in async/await code at zero cost.