 URL : "https://github.com/pearu/pylibtiff/issues/66" TITLE : finding tiff header file BODY : if you have a version of libtiff that doesn't have a pre-made python header file, and you are running python in a virtual environment, tiff.h is not located, since sys.prefix will be the virtual environment and not something like /usr . on linux systems with gcc installed, perhaps some additional paths could be checked. if the tiff.h header file has not been found, we could call cpp -v to get a list of the include paths that gcc would search, and then search each of those for tiff.h . for instance, we could do: if not os.path.isfile include_tiff_h : import subprocess try: cpp_info = subprocess.popen cpp , -v , -o , /dev/null , stderr=subprocess.pipe, stdin=open '/dev/null', 'rb' .communicate 1 cpp_paths = cpp_info.split include \ ...\ search starts here: 1 .split end of search list. 0 .split for cpp_path in cpp_paths: cpp_path = cpp_path.strip if cpp_path.startswith '/' : include_tiff_h = os.path.join cpp_path, 'tiff.h' if os.path.isfile include_tiff_h : break except exception: pass but there might be a better way than trying to parse the output of cpp for include ... search starts here: and end of search list. ...