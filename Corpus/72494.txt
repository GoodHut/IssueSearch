 URL : "https://github.com/isocpp/CppCoreGuidelines/issues/1119" TITLE : c.43 might be too strict BODY : the wording of c.43 may lead newbies into trying too hard to provide default constructors for classes where this doesn't make sense. i know that the rule at one point states so if a default constructor can be reasonably defined, it should be. however, how reasonable is reasonable? also, i don't feel like c.43 is argumented enough. quote: many language and library facilities rely on default constructors to initialize their elements, e.g. t a 10 and std::vector<t> v 10 . to me, these examples don't feel strong enough. for vectors we can instead use std::vector<t> 10, v , where v is a default value that most suites our particular use case as is mentioned somewhere in the c.43 as well . arrays are a good point for discussion. i feel like in the worst case the user would use a function that initializes individual elements in a loop and returns a std::array object. i don't see why anyone would expect a date class to have a default constructor, for example. is it perhaps because it has a default constructor in some other language? :- . in fact, maybe class date { public: static date epoch { ... } date ... {} // non-default constructor, or just use list-initialization }; would be a better approach. what if person a expects a date class to be initialized to epoch like in the current example , while person b expects it to be initialized to the current time this is how date works in java and javascript, so people from those backgrounds would have different habits and expectations ? to re-iterate: - can we define more precisely how far one should go in their efforts to define a default constructor? - can we provide stronger reasons as to why one should try to define a default constructor? - should we maybe provide an easier example than a date class? should we maybe change up the current example a bit?