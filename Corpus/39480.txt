 URL : "https://github.com/ReactiveSocket/reactivesocket/issues/146" TITLE : setup vs h2 settings BODY : reactivesocket has a single unidirectional setup frame and follows a nack model instead of an ack model for the setup properties . this means that a server that does not support a required setup property should reject setup but if all setup properties are supported then no action is required. this design has the positive of supporting a false start i.e. a client does not have to wait for the setup ack. however, it has a few negatives: - inability to indicate lack of support for an optional setup property eg: resumability - inability for a server to send any setup information eg: server honor lease otoh, http/2 follows a more flexible settings frame design https://tools.ietf.org/html/rfc7540 section-6.5 which has a few advantages: - extensible to add new settings. - bi-directional - supports ack/nack per setting. - although trivial but reduce data exchange by omitting properties that one doesn't care about, eg: mime types, resumability. should we be thinking about changing this design in the light of the two negatives above?