 URL : "https://github.com/philsquared/Catch/issues/1021" TITLE : benchmarks for catch 2 BODY : hi! i remade the benchmarks https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md using the 2.0.0-develop.3 release and i want to share the results compared to version 1.9.3 . first of all i had to comment out a line - catch_break_into_debugger ; in assertionhandler::reactwithdebugbreak when using catch_config_disable or catch_config_fast_compile - both with msvc vs 2017 and mingw-w64 g++ 7 i think also under linux . for the benchmark results - here is a commit https://github.com/onqtam/doctest/commit/6ff3d35ac0d39639509d4bc087db90f78ce29b4c diff-b9f10cd05671bd74afed40cef7fe93f7 that shows how the numbers in the tables of the benchmarks page have changed and a followup commit https://github.com/onqtam/doctest/commit/0c65bef670dd60a46252b3749ec392823b5d1119 diff-b9f10cd05671bd74afed40cef7fe93f7 with a bit more text changed . so there are a few conclusions for catch 2: - catch_config_disable does not affect the header cost in any way - but works great for the assert macros - the header seems to be about 10% lighter on compile times - except for clang under linux - the compile times of the implementation the test runner that goes into only one translation unit have gone up for gcc/clang by about 10-40% - apart from msvc debug - all other configurations take more time to compile 50000 asserts - around 15-160% increase gcc in release is particularly bad - both on windows and on linux - the fast compile option does indeed work - gains are around 15-55% - the runtime has been improved a lot - a passing assert looped 10 million times takes between 2 and 5 times less time for int i = 0; i < 10000000; ++i check i == i ;