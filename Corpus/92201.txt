 URL : "https://github.com/varnishcache/varnish-cache/issues/2421" TITLE : vmod-blob api adjustments BODY : i was supposed to start a thread on the dev mailing list but couldn't make it, so instead i'm filing this for today's bugwash. sorry about that. besides matin's mention of blob.subblob i also have changes i'd like to see in the api, in order of appearance in the vcc file: encoding vs decoding enums i'm not fond of the idea of having different enums for reciprocal functions, even though i understand the reason behind it. i'd rather see just hex and url in encoding too, and have an additional parameter in related functions that defaults to lower case. we can document that this argument has no effect on case-sensitive encodings. example: $function string encode enum { identity, base64, base64url, base64urlnopad, hex, url } encoding = identity , blob blob, enum {lower, upper} case = lower blob.decode_n i'd rather have an additional int parameter in decode that defaults to zero, with the semantics of no maximum if lower or equal to zero : $function blob decode enum { identity, base64, base64url, base64urlnopad, hex, url} decoding= identity , int length=0, string_list encoded blob.transcode_n same as above. blob.same looking at the doc there's a contradiction between the i.e. they specify exactly the same region of memory statement and the rest of the description. especially with regards to empty blobs. blob.blob ... i'm not too happy with the constructor having the same name as the vmod, i guess it used to be blobcode.blob . we could go for new xxx = blob.object ... instead. as a side note, since the enum parsing code is generated goto-driven code, maybe we should check in the script in the tools/ directory for future changes eg. if a new encoding is supported .