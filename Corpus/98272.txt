 URL : "https://github.com/Microsoft/TypeScript/issues/17232" TITLE : inference for mapped types BODY : <!-- bugs: please use this template. --> <!-- questions: this is not a general support forum! ask qs at http://stackoverflow.com/questions/tagged/typescript --> <!-- suggestions: see https://github.com/microsoft/typescript-wiki/blob/master/writing-good-design-proposals.md --> typescript version: 2.4.0 / nightly 2.5.0-dev.201xxxxx code ts // a self-contained demonstration of the problem follows... type a<t> = { k in keyof t : a<t k > | b<t k >}; type b<t> = { x: t }; var obj = { a: { a: { x: 1 }, b: { x: } }, b: { a: { a: { x: 1 }, b: { x: true }, c: { x: we are here } }, b: { x: 3 }, c: { x: } } } declare function f<t> v: a<t> : t; if f obj .b.a.c == we are here { //perfectly works } type al<t> = { k in a | b & keyof t : al<t k > | b<t k >}; declare function fl<t> v: al<t> : t; var objl = { a: { a: { x: 1 }, b: { x: } }, b: { a: { x: 3 }, b: { a: { x: 1 }, b: { x: } } } } var x: al<typeof objl> = objl; //ok fl obj .????? //doesn't work i expected it to be working. is it design limitations?