 URL : "https://github.com/ResidentMario/py_d3/issues/4" TITLE : trap d3 runtime version BODY : the version of d3 that gets loaded you first initialize a notebook with py_d3 code in it is obvious: whatever version of d3 you specify in the first %%d3 call in the notebook, or 3.5.11 if you choose not to pin a version then. running multiple version of d3 in the same notebook is unsupported, due to the way require.js handles loading and this is the correct behavior: this has limited utility anyway, and would cause continuous animations, if you have them, to crash . however, what happens when you reload a pre-existing notebook is less clear. all of the javascript on the page gets executed nearly simultaneously, and, near as i can tell, the first version of the d3 library that gets loaded from the cdn is the one that is pinned. this means that if you declare e.g. %%d3 4.4.4 in a cell at the beginning of the notebook, then use a clean %%d3 later on, the first time you run the notebook every cell will run 4.4.4 code, but every time after that it'll be a lottery ? , with 3.5.11 a likely winner which will break any of your v.4 code when you try to run it... . this inconsistent behavior is a very not-nice usability trap. the workaround right now is to always specify the same specific version in all of your %%d3 calls, so that all of the cells converge equivalently. in the long run, this needs to be patched so that. i think this can be done by exposing a self.initialized variable in the magic initializer. but it needs testing.