 URL : "https://github.com/nortikin/sverchok/issues/1256" TITLE : generic node callbacks BODY : from scripted node lite. python class svscriptnodelitecallback bpy.types.operator : bl_idname = node.scriptlite_ui_callback bl_label = snlite callback fn_name = bpy.props.stringproperty default='' def execute self, context : getattr context.node, self.fn_name return {'finished'} there are now several of these floating around, and it makes sense to one as a generic operator. first i think a generic parameter-less version... python class svgenericcallbacknoparams bpy.types.operator : bl_idname = node.sv_generic_callback_no_params bl_label = svgeneric callback no params fn_name = bpy.props.stringproperty default='' def execute self, context : getattr context.node, self.fn_name return {'finished'} this would let you call a function defined in your node instead of having to write an operator. python cb_shortname = node.sv_generic_callback_no_params row.operator cb_shortname, text='export', icon='plugin' .fn_name = 'export' then somewhere in your node you'd have a def export self : ...