 URL : "https://github.com/Aquarius1993/reactblog/issues/1" TITLE : blog test one BODY : 态势感知前端框架 态势感知属于spa，前端框架采用vue.js，借助webpack打包构建。 代码规范 详见 confluence https://confluence.b.360.cn/pages/viewpage.action?pageid=41880068 目录结构 bin：脚本命令 src：源码目录 apps：各个页面，包括app，错误页，大屏等 assets：一些公共图片资源 commons：每个页面都包含的sti扩展，以及全部常量 components：全局的组件 i18n：国际化相关 model：用户相关的操作逻辑 pages：路由相关，配置好后会自动生成router/router.js相关的路由信息 plugin：全局的函数都定义在这里，包括ajax，全局指令，过滤器等等 router：路由和权限相关的内容 store：vuex相关，存一些公用的信息，如用户信息，主题，大小屏等 utils：内部常用的工具 static：静态资源 style：全局样式文件 test：测试用例 版本控制 前端采用功能分支工作流方式，每个app作为一个特征分支，每个app独立开发，之间“零耦合”，通用功能和需求都又 feature-sti_framework 提供，其他分支与其保持同步，之后再通过项目分支或者发布分支合并各app，实现app的自由组合。 feature-sti_framework 主框架分支 feature-sti_command 指挥调度小屏分支 feature-sti_command_vis 指挥调度大屏分支 feature-sti_notification 通报处置分支 feature-sti_safety_monitor 安全监测分支 feature-sti_resource_monitor 资源监测分支 feature-sti_configuration 资源监测分支 feature-sti_integrate_sa_new 综合态势大屏分支 feature-sti_protection 等保分支 执行脚本 bash 安装依赖 npm install 编译dll文件 npm run dll 编译样式文件 npm run style 启动服务 npm start js规范监测 npm run lint 生成环境编译 npm run build