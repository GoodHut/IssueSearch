 URL : "https://github.com/turion/rhine/issues/17" TITLE : implement event clock BODY : implement a clock in a special monad m or monad transformer that ticks upon a particular side effect in m depending on the clock value . other parts of the signal network that are also in m can then trigger events on this clock. one crude implementation could go roughly like: data mvareventclock a = mvareventclock mvar a instance clock io mvareventclock where startclock mvareventclock var = arrm_ getcurrenttime &&& arrm_ takemvar var triggerevent :: mvareventclock a -> a -> io triggerevent mvareventclock var = putmvar var care needs to be taken that triggerevent does not lead to deadlocks when called from a signal on the same clock. possibly, chan or stm.tchan will give a more robust implementation. is it possible to implement such a clock purely?