 URL : "https://github.com/Aeva/m.grl/issues/250" TITLE : webgl 2 support BODY : reflecting on benchmark results for a stress test in fast_graph, a step before jumping right into instancing for static objects 246 could be to use uniform buffer objects. problem is, those are only available in webgl 2. i was hoping that m.grl could try to acquire a webgl 2 context first, and then fall back to webgl 1 if needed, and have the engine treat any new functionality as being optional, as it does with most webgl 1 extensions. for better or for worse, the shader language received a number of changes https://webgl2fundamentals.org/webgl/lessons/webgl1-to-webgl2.html that would require support for. i've been fantasizing about throwing together a scheme-like shader language to use instead of glsl for m.grl to compile to glsl. an advantage to this might be that the shader compiler could be simplified greatly, but also to not favor any specific compiler target. so, a rough list of things to do for this: - a more flexible input shader language supporting multiple compilation targets - update the webgl context bootstrapping code - book keeping for if new features are present might just be a global for the webgl version - update static object codegen to use ubos