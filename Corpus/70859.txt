 URL : "https://github.com/WebAssembly/design/issues/1078" TITLE : ðŸ›¤ exception handling BODY : this is a tracking issue for a post-mvp feature it will be updated as the issue progresses. topic exception handling champion karl schimpf @karlschimpf status in progress linked issues 417 linked repositories github.com/webassembly/exception-handling https://github.com/webassembly/exception-handling details the webassembly mvp supports four no-exception modes for c++: compiler transforms throw to abort . compiler-enforced -fno-exceptions mode note caveats . compiler conversion of exceptions to branching at all callsites. in a web environment exception handling can be emulated using javascript exception handling, which can provide correct semantics but isn't fast. these modes are suboptimal for code bases which rely on c++ exception handling, but are perfectly acceptable for c code, or for c++ code which avoids exceptions. this doesn't prevent developers from using the c++ standard library: their code will function correctly albeit slower at times as long as it doesn't encounter exceptional cases. post-mvp, webassembly will gain support for zero-cost exception handling. in turn, this can be used to implement setjmp / longjmp , and can enable all of the defined behavior of setjmp / longjmp , namely unwinding the stack without calling c++ destructors. it does not, however, allow the undefined behavior case of jumping forward to a stack that was already unwound which is sometimes used to implement coroutines. coroutine support is being considered separately. caveats : https://blog.mozilla.org/nnethercote/2011/01/18/the-dangers-of-fno-exceptions