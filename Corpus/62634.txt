 URL : "https://github.com/godotengine/godot/issues/13027" TITLE : copy-on-write and image BODY : i am having big trouble working around a behaviour i found with poolvectors... basically: cpp // contains a lot of data, refcount is 1 poolvector<uint8_t> array1; // using a by-value getter creates this situation: // another poolvector refers to the same data internally, refcount becomes 2 poolvector<uint8_t> array2 = array1; // now let's write to it: // oh, refcount is 2? copy-on-write triggers, // you just copied 32 megabytes even though you are the only one touching this data poolvector<uint8_t>::write w = array2.write ; w 0 = 42; // once you're finished... all data you changed is lost anyways. now put in context: i am working on a huge image, and i want to modify some of its pixels in a precise way. for this reason, i don't want to use the set_pixel color api because it forces me to work using floats, which is less efficient and a bit dodgy when the data behind must be integers. i use image::get_data and modify that, however the same situation happens here. memory usage doubles, and all changes are lost. so what should i do then? is set_pixel the only way to go? should a new function be added to image? should get_data return a reference?