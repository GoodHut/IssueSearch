 URL : "https://github.com/Arvinds-ds/Stan-Code/issues/1" TITLE : pre calculate q and r BODY : i was having trouble with bad_alloc with larger data fed into the models in your case study. the on discourse.mc-stan.org http://discourse.mc-stan.org/t/qr-and-bad-alloc/2472 it was recomended that it is better to do the qr decomposition in r — which does a thin qr decomposition — and pass in the q and r matrices. so i wondered if we could add that advice to the case study. life is a do-ocracy so hear is the code i got working. preparing the data looks like: python center = x.mean 1 x_centered = x.t - x.mean 1 .t q, r = np.linalg.qr x_centered.t data 'q' = q data 'r' = r and the model looks like: stan %%stan -f qr_regr_centered.stan data { int<lower=1> n; int<lower=1> m; matrix m, n x; vector n y; matrix n, m q; matrix m, m r; } transformed data { r_inv = inverse r ; } parameters { vector m beta_tilde; real alpha; real<lower=0> sigma; } transformed parameters { vector m beta = r_inv beta_tilde; } model { beta ~ normal 0, 10 ; alpha ~ normal 0, 100 ; sigma ~ cauchy 0, 10 ; y ~ normal q beta_tilde + alpha, sigma ; } this code can be scaled to larger data as it does a thin qr directly not a full qr and a truncation. it also seems to run faster and in fewer gradients evals, but i don't know why.