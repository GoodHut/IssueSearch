 URL : "https://github.com/ljedrz/lambda_calculus/issues/19" TITLE : 2.0.0 api changes BODY : some thoughts on api changes that might be nice to have in version 2.0.0; i'm happy to implement some or all of these. compare should return a data structure containing the reduction counts instead of writing to stdout. this data structure could have a debug and/or display implementation that returns a string that is the same as what compare currently prints. it might also make sense to do something similar with the reduction steps for beta . this would probably require splitting beta into two functions, beta which returns the reduced term and beta_verbose which returns the reduced term and reduction steps . it might be desirable to build the church and scott modules at the same time; the only functionality in those modules that needs to be hidden behind feature gates are the from implementations, as they conflict with each other. there are several ways to achieve this, one way would be to add functions like to_church_int and to_scott_int which can be compiled together, then just modify the from implementations to call these. some other non-breaking features that i think would be nice to have, not necessarily in 2.0.0: a method is_supercombinator on term that checks whether a lambda term is a supercombinator https://en.wikipedia.org/wiki/supercombinator , i.e. just a depth-first search to check all the var s. more speculative since it's possible to church-encode or scott-encode, etc any algebraic data type, there could be a dsl for defining the shape of an algebraic datatype and then a function to convert this structure to lambda terms representing its church-encoded or scott-encoded constructors and accessors.