 URL : "https://github.com/chan-kelv/GoSixDegrees/issues/1" TITLE : node to node rpc BODY : multiple instances of the server will be spun up to share the work of web crawling. one is designated as the master with a command prompt flag -m and the others as slaves -s . on startup, the master node begins an rpc listen on a port to allow for the connection of slave nodes. slave nodes must connect to the master to connect to the master. - master must keep track of all nodes connected to it - may need to add command arg to let slaves know of master's ip:port - rpc setup needs to occur before http requests can be made. listening example: https://parthdesai.me/articles/2016/05/20/go-rpc-server/ https://golang.org/pkg/net/rpc/ > go func { //turn serverip into tcp address listen, err := net.listen tcp , serverip //register new server with ability to handle mserver rpc methods mserver := new mserver server := rpc.newserver server.register mserver for { conn, err := listen.accept //todo - save the conn } } slave connection example: > / connect to a server. the server will keep a record of the worker who dialed todo - save the client that is returned / func createclienttoserver serverip string client net.tcpconn, err error { address, err := net.resolvetcpaddr tcp , serverip if err != nil { fmt.println worker client error , err err = fmt.errorf worker client error , err } client, err = net.dialtcp tcp , nil, address if err != nil { fmt.println worker client error , err err = fmt.errorf worker client error , err } return client, nil }