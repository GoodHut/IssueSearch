 URL : "https://github.com/tokio-rs/tokio-core/issues/220" TITLE : spawning scoped futures? BODY : today handle::spawn requires 'static futures. however, i believe this pattern is common: rust fn main { let config = load_config .unwrap ; let core = core::new .unwrap ; let listening_socket = bind_socket &core .unwrap ; // create listener future which spawns a future for each client. // client future should be able to access config obviously, this code could use &config in theory, because config outlives everything else. however this isn't actually possible with current api. one must use arc<config> today. how hard would it be to allow using &config ? was this considered? i understand that the future might be polled by other threads after main returns but i wonder if there is a way to ensure it won't. maybe it's not worth the effort though. that's what i'd like to know.