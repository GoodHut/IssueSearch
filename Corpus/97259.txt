 URL : "https://github.com/denghuiquan/GG-ApiDesignGuide/issues/1" TITLE : gad01: introduction 引言 BODY : introduction 引言 --- 目录 ： - 什么是rest api? - 设计流程 - 方法 - 例子 - gmail api - google cloud pub/sub api --- 这个设计指南的目标是要帮助开发者设计出简单、一致、而且易用的网络化接口（api）。同时，它也有助于融合基于http的协议的rest api和基于套接字协议的rpc api的设计。 传统上，人们在api 接口和方法方面来设计rpc api，如corba和windows com。随着时间的推移，越来越多的接口和方法被介绍了。最终的结果可能是数量众多的接口和方法，它们各不相同。开发者必须小心地学习了解每一种以便可以正确地使用这些接口。这既费时又容易出错。 rest的建筑风格最早是在2000推出的，主要是为配合http / 1.1工作设计的。它的核心原则是定义命名资源，那样就可以使用少量的方法进行操作。资源和方法被称为api的名词和动词。用http协议，将资源名称自然映射到url，这样一来方法自然地映射到http的获取、放置、修补和删除方法上。 在网络中，http rest api 最近已经非常成功。在2010年， 大概74%的公共网络api属于http rest api 或类rest api 。 虽然http rest api在internet上非常流行，但它们承载的流量比传统rpc api小。例如，在美国，大约有一半在高峰时间的互联网流量是视频内容，考虑到性能原因很少有人会考虑使用rest api提供这些内容。在内部数据中心中，许多公司使用基于套接字的rpc api来承载大部分网络流量，这可以比公共rest api高出一个数量级。 事实上，由于各种原因，rpc api和http rest api都需要。理想的情况下，api平台应该为所有api提供最好的支持。这个设计指南帮助你设计和构建出符合此原则的api。它通过将面向资源的设计原则应用于通用api设计，同时定义了许多通用的设计模式，以提高可用性和减少复杂性。 注意 ：本设计指南解释了如何将rest原则应用于与编程语言、操作系统或网络协议无关的api设计中。它不是指导创建rest api的指南。 --- 什么是rest api? rest api被建模为单独可寻址资源的集合（api的名词）。资源可通过它们的资源名称来引用，并通过一组方法（也称为动词或操作）进行操作。 谷歌api（也称为rest方法）的标准方法是列表（list）, 获取（get）, 创建（create）, 更新（update）, 以及删除（delete）。自定义方法（也称为自定义谓词或自定义操作）也可用于为那些不容易映射到一个标准的方法的功能的api设计器，如数据库事务。 注意 ：自定义动词并不意味着创建自定义http谓词以支持自定义方法。对于基于http的api，它们只映射到最合适的http谓词。 设计流程 设计指南建议在设计面向资源的api时采取以下步骤（更多细节包括在以下部分）： - 确定api提供的资源类型。 - 确定资源之间的关系。 - 根据类型和关系决定资源名称方案。 - 决定资源模式。 - 为资源附加最少的方法集。 --- 资源