 URL : "https://github.com/delight-im/PHP-Temporal/issues/3" TITLE : final class vs interface BODY : looking a the codebase i have to wonder why creating final classes that only contains constants instead of interfaces. something along these lines: php <?php use delight\temporal\iso8601\iso8601date; use delight\temporal\iso8601\iso8601datetime; use delight\temporal\iso8601\iso8601duration; use delight\temporal\iso8601\iso8601time; use delight\temporal\iso8601\iso8601weekday; use delight\temporal\timestamp\unix; / immutable representation of date and/or time / final class temporal implements iso8601date, iso8601datetime, iso8601dateduration, iso8601time, iso8601weekday, unix { ... rest of the code here why: - these value will not change so their are valid candidate for being put in an interface - someone could easily use your interface to implements them in their classes how: - to avoid bc break you would need to name the interface s differently and then copy the current value in the current final class. open issue - should you have one big interface will all the constants of a serie of small interfaces ?