 URL : "https://github.com/typelevel/algebra/issues/209" TITLE : law testing guidelines BODY : this comment is not about the simpler encoding discussed in 206. i remarked that the laws structure does not follow the typeclass structure exactly. for example, we have tests for lattice a with boundedjoinsemilattice a , which simply collect laws of lattice and boundedjoinsemilattice , however the corresponding combined typeclass does not exist. combinations with distributivelattice a do not exist: thus we have the quite obtuse fragment scala def generalizedbool implicit a: genbool a = new logicproperties name = generalized bool , parents = seq , ll = new latticeproperties name = lowerboundeddistributivelattice , parents = seq boundedjoinsemilattice, distributivelattice , join = some boundedsemilattice a.joinsemilattice , meet = some semilattice a.meetsemilattice , in the definition of generalizedbool . laws should serve as executable documentation, and this goes against the spirit. i don't know what is the good solution there solution 1: the law hierarchy follows the typeclass hierarchy. extra laws that occur when multiple types interact are proposed separately i.e. lattices with partial orders . for this to work, we need a way to merge rulesets. solution 2: close the hierachy by adding all combinations. that would double the size of the lattice laws, as every instance would have a distributive copy alongside. i'll try to come up with something better with my reformulation of laws; in case it does not go through, i'll let this issue remind us of the problem.