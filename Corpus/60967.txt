 URL : "https://github.com/SpiNNakerManchester/PACMAN/issues/133" TITLE : add smart token support BODY : the current executor does not allow for a number of algorithms unknown to algorithm a to be executed before it other than through the explicit ordering of the algorithms provided to the executor, which has been deemed unacceptable for this purpose . an example of this is in data loading - there may be any number of algorithms that are involved in the loading of data, with more being added depending on the front-end application, but the binary loader should not and cannot know about all these algorithms. to avoid a need to rewrite the binary loader for each front-end, a smart of composite token should be supported. this token would ensure that all required algorithms that produce the token as output must be run before any algorithm that takes the token as input. this might operate in one of the following ways: - the exact requirement is built into pacman that all required algorithms that take a smart token as input and output the same smart token must be run before any algorithm that takes that smart token as an input, - additional optional metadata is added to each algorithm that indicates the parts of a specified composite token that it fulfils. only when all parts of a composite token have been run will an algorithm that requires the token be executed. the parts of the composite token can then be dynamically determined by the algorithms in the chain that generate the token. in the example of data loading, each algorithm that can load data will declare explicitly that it generates part of a dataloading token e.g. dataloading:dsg indicates an algorithm that generates the dsg part of a dataloading token. if this algorithm is optional, it will be run if no other algorithm can generate the dsg part of the dataloading token. a future algorithm only requires that dataloading token is produced; this will only be true when all parts of the composite token are fulfilled.