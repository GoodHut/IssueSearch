 URL : "https://github.com/KhronosGroup/glTF-Validator/issues/47" TITLE : errors beget more errors BODY : i think this is a common problem for compilers and such. once a real error sends parsing off the rails, additional follow-on errors may not be on-target. one example: https://github.com/khronosgroup/gltf-sample-models/blob/e6c0057a26f58c4f72cfa3b264ee0df281cc1a7b/2.0/damagedhelmet/gltf/damagedhelmet.gltf l29 change vec3 to vec3x and run the validator: > invalid value 'vec3x'. valid values are... correct! > invalid accessor format '{null, float}' for this attribute semantic. must be one of '{vec3, float}' . well, yes, this position is invalid in that it references an invalid accessor , so, i guess this is ok, but it's not where the problem is. > accessor.min and accessor.max must be defined for position attribute accessor. no, min and max are certainly defined for this accessor . let's try another example: https://github.com/khronosgroup/gltf-sample-models/blob/e6c0057a26f58c4f72cfa3b264ee0df281cc1a7b/2.0/normaltangenttest/gltf/normaltangenttest.gltf l22 change mesh : 0 to mesh : 50 . > unresolved reference: 50. correct! > empty node encountered. no, the node contains only an invalid reference, but it's certainly not empty.