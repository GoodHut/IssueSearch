 URL : "https://github.com/colin-kiegel/rust-derive-builder/issues/80" TITLE : custom struct definition BODY : derive_builder could skip the struct definition and leave that to the user. it would then only generate the setters. the user would need to exactly match the signature and error messages will most likely be not very helpful due to lacking span information, like some type was not as expected .. ok, which one? . but on the other hand it's really just wrapping everything in an option. possible use case: deserialization of builder struct cc @teddriggs <details> <summary>example</summary> <pre lang= rust ><code> /// derive builder, but skip the struct definition. derive builder builder custom_struct= configbuilder pub struct config { &nbsp;&nbsp;&nbsp;&nbsp;pub appliance: appliance, &nbsp;&nbsp;&nbsp;&nbsp;pub rules: vec&lt;rule&gt;, &nbsp;&nbsp;&nbsp;&nbsp;pub manual_limit: option&lt;usize&gt;, &nbsp;&nbsp;&nbsp;&nbsp;pub track_indices: bool, } <br> /// manual implementation of the builder struct. derive serde pub struct configbuilder { &nbsp;&nbsp;&nbsp;&nbsp;appliance: option&lt;appliance&gt;, &nbsp;&nbsp;&nbsp;&nbsp;rules: option&lt;vec&lt;rule&gt;&gt;, <br> &nbsp;&nbsp;&nbsp;&nbsp; serde default, rename = limit &nbsp;&nbsp;&nbsp;&nbsp;manual_limit: option&lt;option&lt;usize&gt;&gt;, <br> &nbsp;&nbsp;&nbsp;&nbsp; serde default, rename = track_usage &nbsp;&nbsp;&nbsp;&nbsp;track_indices: option&lt;bool&gt;, } </code></pre> </details>