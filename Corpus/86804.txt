 URL : "https://github.com/jruby/jruby/issues/4551" TITLE : improve backtrace elision BODY : for 4540 we investigated a performance regression that turned out to be our more-strict i.e. less broken backtrace elision in jruby 9.1.8.0. our recommendation for that bug was to fix the excessive exception raising in the libraries in question, but this bug will track improvements to backtrace elision. the current thought is that we could, for some subset of rescue clauses, scan the rescue arguments before entering the rescued body. that would allow is to see if the rescued elements are normal exceptions with normal === implementations, allowing us to perform the same backtrace elision as we do for the implicit standarderror in blank rescues. risks: if the exception looked up before the block is different than what the rescue clause would see later, we may elide incorrectly. if the exception is the same but the === impl changes, we may elide incorrectly. these risks could be mitigated but not eliminated by deferring the decision about backtrace elision to the last possible moment: immediately before generating a stack trace. then the failure surface becomes the period between that decision and the eventual rescue of the exception -- a very short period of time while the stack is unwound. if ensures or other rescues would intervene, we'd already have disabled the elision...so this would only affect the logic triggered by the rescue argument itself and any out-of-band activity e.g. on another thread . this would be good to have for 9.2 but landed sooner for bake time.