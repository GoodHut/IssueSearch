 URL : "https://github.com/Quasilyte/Go.el/issues/32" TITLE : variadic ops optimization BODY : x + y + z translated to: eval x eval y concat 2 eval z concat 2 but it is better to emit: eval x eval y eval z concat 3 it also makes it easier to constant fold string concatenation sequences. note that lisp.concat x, y, z generates optimal code. this implementation is bad, but can give starting approximation: go func weakenconcat form sexp.instrcall sexp.form { switch len form.args { case 0: return sexp.str case 1: return form.args 0 } // this code should be re-written. args := make sexp.form, 0, len form.args for _, arg := range form.args { arg = reducestrength arg if arg, ok := arg. sexp.instrcall ; ok { if bytes.equal byte concat , arg.instr.name { args = append args, arg.args... continue } } args = append args, arg } form.args = args form.instr = instr.concat len args return form }