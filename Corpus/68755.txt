 URL : "https://github.com/vatlab/SOS/issues/615" TITLE : shared option for tasks BODY : currently tasks are executed as isolated blocks of statements that do not return any value to the step. suppose we want to perform some tasks sequentially and stop the step under certain conditions, e.g. input: for_each='rep' stop_if sigma < 0.005 task: concurrent = false simulation to calculate sigma there should be someway for us to return variables to sos, something like input: for_each='rep' stop_if sigma < 0.005 task: concurrent = false, shared='sigma' sh: simulation to calculate sigma sigma = float open result .read where sos would get the value of variable sigma from the task namespace, and return to sos. another example would be running a large number of tasks and calculate statistics of some quantity, in which case tasks could be executed in parallel. of course the biggest issue is that there can be many instances of task so the results should be a list, or a dictionary with _index as keys. then, if we are to expose the result to the entire workflow, another shared option would be needed at the step level.