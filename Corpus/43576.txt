 URL : "https://github.com/zhanhongtao/blog/issues/239" TITLE : css custom properties BODY : 定义 在任意声明块内定义. 1. 定义在 :root 上, 相当于全局 css // :root { --color: 333; } 2. 定义在普通声明块内 css .item { --color: 666; / 在当前声明块内使用 --color 时, 会优先使用 --color: 666 / } 3. 在 :hover 状态时, 会覆盖 666 为 999 css .item:hover { --color: 999; } 4. 当多个声明块内存在相同变量时, 优先使用选择器优先级更高的 css body .item { --color: ccc; } 5. 当声明块内存在重复定义的变量时, 使用最后一次定义的变量 css .item { --color: 333; color: var --color ; / 会使用 666 / --color: 666; } 使用 1. css :root { --bg: f8f8f8; } body { background-color: var --bg ; / 此时背景色为 f8f8f8 / } 2. 当使用的变量不存在 css :root { --bg: f8f8f8; } body { background-color: var --default-bg, f8f8f8 ; / 不存在变量--default-bg, 使用第二参数 / / 或者 background-color: var --default-bg, var --bg ; / } 用 javascript 修改 property element.style.setproperty '--color', value element.style.getpropertyvalue '--color' element.style.removeproperty '--color' 用途 使用覆盖变量来实现样式重写, 从而减少代码量 或者用 js 来重写 --bg-color css .item { --bg-color: f8f8f8; background-color: var --bg-color ; } .item--active { --bg-color: a9a9a9; } 在 javascript 里或者 keyframe 里重写 transform 中单个 translate/scale/rotate 属性, 用 custome peroperty 更方便 css :root { --transform: 0; --rotate: 0; --scale: 1; } .item { transform: transform --transform rotate --rotate , scale --scale ; } js let style = document.documentelement.style style.setproperty '--scale', 1.2 style.setproperty '--rotate', '45deg'