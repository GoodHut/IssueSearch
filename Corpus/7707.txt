 URL : "https://github.com/carllerche/mio/issues/790" TITLE : idea for timers BODY : i know timers where a part of mio and have since been removed, but i have somewhat simple idea that might be good for inclusion in the crate again. this would add a new struct called timer , e.g: rust struct timer { deadline: instant, } impl timer { fn new deadline: instant -> timer { timer { deadline } } fn timeout timeout: duration -> timer { timer { deadline: instant::now + timeout } } } for implementing evented for it poll would need an ordered collection, e.g. a linked list, of deadlines. then when poll.poll is called rather then using the user provided timeout we would use the first deadline as a timeout or the provided timeout if is earlier . something like this: rust struct poll { deadlines: linkedlist<instant>, } impl poll { fn poll &self, events: &mut events, timeout: option<duration> { let first_deadline = self.deadlines.first ; let timeout = match timeout { some timeout => ::std::cmp::min instant::now + timeout, first_deadline , none => first_deadline.duration_since instant::now , // todo: check deadline < now . }; // continue like normal. // after everything is just, just before returning. // loop over all deadlines and create an event for each one of which the deadline has passed. } }