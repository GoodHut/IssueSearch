 URL : "https://github.com/sorintlab/sircles/issues/10" TITLE : path to real cqrs BODY : this issue is to track changes needed to make sircles a real cqrs application. the unique thing that we'll do differently is to handle all events and related generated commands and events in an unique transaction. for example: when a circle is deleted, an event handler will handle this event and create commands to every tension associated to that group to unset it. we'll handle all this in an unique transaction. the reason is dictated by the features required on the read side: since we provide a timeline based navigation, we want to provide a consistent view for every timeline. for doing this we have to group under an unique timeline all the related changes. so this is done only for the above reason, the command part will able to work and converge to a consistent state also without doing it in an unique transaction. - remove the timeline aggregate , it doesn't make any sense and the timeline concept can be managed only on the read side using the events correlationid. - remove the commands aggregate, it doesn't make any sense. just save the commands as event of their related aggregate. - the command part will use its own snapshot implementation instead of using the readdb. - the readdb will apply the events in a separate transaction. - the eventstore now is a fully serializable event store: it accepts one change at a time and fails the transactions having serializabale errors this is a property enforce by the db using a serializable isolatioon level . this isn't a big problem given the write ratio but we can make it able to accept concurrent changes to different aggregates.