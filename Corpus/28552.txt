 URL : "https://github.com/crossbeam-rs/rfcs/issues/19" TITLE : guards can be sound BODY : in the atomic api rfc https://github.com/stjepang/rfcs-crossbeam/blob/atomic-api/text/2017-05-02-atomic-api.md scopes-or-guards , i argued that we should model pinning using scopes rather than guards, for three reasons: 1. guards are tricky to implement correctly in a sound manner . 2. guards were a tiny bit slower in my microbenchmarks. 3. guards are less explicit and thus easier to misuse by e.g. accidentally pinning for too long . this time i'd just like to show that the first point is invalid - it's actually pretty easy to make guards sound. here's a quick refresher. the problem was the following: if you pin the current thread and obtain a guard, you can keep having the guard for a very long time, even after the thread-local handle gets destructed. using it after that would be unsafe. and here's the solution... currently, when traversing the linked list of registered threads, we remove a node if its next pointer is tagged with 1. we should just have an additional check: remove it if the tag is 1 and if the thread is unpinned. that's all we need to change. cc @hniksic guards would make the following possible mentioned here https://www.reddit.com/r/rust/comments/763o7r/blog_posts_introducing_lockfree_rust_comparing/docu634/ : rust pub get_ref &'a self, key: k -> option<valueguard<'a, v>>;