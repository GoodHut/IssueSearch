 URL : "https://github.com/airbnb/ruby/issues/122" TITLE : return from block BODY : the style guide ought to include a note about using return in a block. from stackoverflow answer http://stackoverflow.com/questions/1435743/why-does-explicit-return-make-a-difference-in-a-proc > ruby has three constructs: > > 1. a block is not an object and is created by { ... } or do ... end . > 1. a proc is a proc object created by proc.new or proc. > 1. a lambda is a proc created by lambda or proc in ruby 1.8 . > > ruby has three keywords that return from something: > > 1. return terminates the method or lambda it is in. > 1. next terminates the block, proc, or lambda it is in. > 1. break terminates the method that yielded to the block or invoked the proc or lambda it is in. > > in lambdas, return behaves like next, for whatever reason. next and break are named the way they are because they are most commonly used with methods like each, where terminating the block will cause the iteration to resume with the next element of the collection, and terminating each will cause you to break out of the loop. perhaps the following recommendation: avoid return in procs/blocks because return terminates the method calling a proc/block: ruby def all_even? self.numbers.all? do |num| if num % 2 == 0 this will cause all_even? to return true when the first even number is reached return true else return false end end end ruby def all_even? self.numbers.all? do |num| if num % 2 == 0 proceed to the next iteration next true else stop iterating, there is at least one odd number break false end end end