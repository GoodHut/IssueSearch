 URL : "https://github.com/msmexplorer/msmexplorer/issues/101" TITLE : implement joy plots BODY : they're trendy and a good option for discrete time-series analysis of distributions. i imagine this would be nice to look at features evolving along a transition pathway. also fairly simple to implement: python import numpy as np import pandas as pd import seaborn as sns import matplotlib.pyplot as plt sns.set style= white , rc={ axes.facecolor : 0, 0, 0, 0 } create the data rs = np.random.randomstate 42 x = rs.randn 500 g = np.tile list abcdefghij , 50 df = pd.dataframe dict x=x, g=g m = df.g.map ord df x += m initialize the facetgrid object pal = sns.cubehelix_palette 10, rot=-.25, light=.7 g = sns.facetgrid df, row= g , hue= g , aspect=12, size=.5, palette=pal draw the densities in a few steps g.map sns.kdeplot, x , clip_on=false, shade=true, alpha=1, lw=1.5, bw=.2 g.map sns.kdeplot, x , clip_on=false, color= w , lw=2, bw=.2 g.map plt.axhline, y=0, lw=2, clip_on=false define and use a simple function to label the plot in axes coordinates def label x, color, label : ax = plt.gca ax.text 0, .2, label, fontweight= bold , color=color, ha= left , va= center , transform=ax.transaxes g.map label, x set the subplots to overlap g.fig.subplots_adjust hspace=-.25 remove axes details that don't play will with overlap g.set_titles g.set yticks= g.despine bottom=true, left=true ! image https://user-images.githubusercontent.com/5142365/28548482-15f23986-7089-11e7-9891-b29ad1b14777.png