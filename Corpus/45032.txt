 URL : "https://github.com/electron/electron/issues/10072" TITLE : gpu cache not working BODY : electron version: 1.7.4 operating system: win 10 - 1703 expected behavior cached shaders in the gpu cache folder should reloaded when electron is loaded actual behavior the compiled shaders read from the gpu cache are discarded at startup because the cache entry key's prefix doesn't match the one calculated by the gpuprocesshost. this happens because the gpu::gpuinfo structure is not still populated when the disk cache is read but it is when the cache is written. to walkaround this, chrome uses a gpuprofilecache that populates temporarily the gpuinfo structure based on previous executions. this gpuprofilecache is not yet implemented in electron. i started implementing it to create a pr but then i realized it is more tricky than i thought. we need a local state than needs a policy service which is also not implemented in electron yet and the policy headers are not even distributed in libchromiumcontent. as our application is heavily based on webgl and so, we need the gpu cache working, i ended up patching gpuprocesshost::getshaderprefixkey to ignore the unavailable data at startup. even though it works, this might be a source of problems in the future. how to reproduce 1 link a very big shader which would take time . 2 close electron 3 reopen electron. if the cache is working, the shader linking should take nothing compared to step 1. we noticed that the shader compilation was talking too long at every execution. then we noticed that the gpu cache was almost cleaned in every execution and rewritten again. so i built 1.7.4 from the sources and debugged electron. that's when i realized the prefix issue. if you have any question about the issue or how to solve it. please don't hesitate to ask me. note: the gpuprofilecache is instanced in chrome/browser/browser_process_impl.h