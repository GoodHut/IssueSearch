 URL : "https://github.com/nodejs/help/issues/464" TITLE : unsafe addon example? BODY : node.js version : 7.4.0 os : ubuntu scope : c++ addons the c++ addon tutorial shows an example of how to pass wrapped objects around https://nodejs.org/api/addons.html addons_passing_wrapped_objects_around which looks like this. c++ void add const functioncallbackinfo<value>& args { isolate isolate = args.getisolate ; myobject obj1 = node::objectwrap::unwrap<myobject> args 0 ->toobject ; myobject obj2 = node::objectwrap::unwrap<myobject> args 1 ->toobject ; double sum = obj1->value + obj2->value ; args.getreturnvalue .set number::new isolate, sum ; } but this seems very unsafe? node::objectwrap::unwrap<t> relies on v8::object::getalignedpointerfrominternalfield , as seen here c++ template <class t> static inline t unwrap v8::local<v8::object> handle { assert !handle.isempty ; assert handle->internalfieldcount > 0 ; // cast to objectwrap before casting to t. a direct cast from void // to t won't work right when t has more than one base class. void ptr = handle->getalignedpointerfrominternalfield 0 ; objectwrap wrap = static_cast<objectwrap > ptr ; return static_cast<t > wrap ; } and the v8 documentation clearly states gets a 2-byte-aligned native pointer from an internal field. this field must have been set by setalignedpointerininternalfield, everything else leads to undefined behavior. so there doesn't seem to be any way an addon developer can gracefully handle a bad argument from a user developer.