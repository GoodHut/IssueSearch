 URL : "https://github.com/eliben/pycparser/issues/173" TITLE : how general is pycparser? BODY : in a project i work on, i want to use pycparser to manipulate c code. the manipulation shouldn't change the functionality and compileabilty of the code. i wish to build a tool that receives a c file and - using pycparser - outputs a manipulated version of it. i want the tool to be very general and automatic an be able to work properly for as many c files as possible. in one of the closed issues about conflict between the typedefs of the fake_libs and the real ones, someone asked: so is it wrong to expect pycparser's output to be compileable, and running just as the initial c code? and the answer was: yes, pycparser can lose information -- especially about the types. you can achieve full end-to-end transform and compile with some effort, but it's not something promised out of the box ------- i'm now concerned that maybe pycparser is not general enough and therefore is not the good tool for my project. can you please elaborate what information can be lost during c2c process and what effort we should do to achieve full end-to-end transform? many thanks!