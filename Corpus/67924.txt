 URL : "https://github.com/dart-lang/sdk/issues/28250" TITLE : re-abstracting a method BODY : i wish there was a way to override an inherited method in such a way that the analyzer would complain if it wasn't reimplemented by further subclasses. that is: abstract class a implements method test with a default behaviour e.g. return null . abstract class b extends a, but wants to indicate that the default behaviour of test isn't ok for b subclasses, and b subclass implementations must implement a real test . class c extends b. i want a warning from the analyzer if c doesn't implement test . right now you can declare an abstract method that overrides a concrete one but both the analyzer and the compiler just ignore it, which is weird: dart abstract class a { void test1 { print 'should never be shown' ; } } class b extends a { @override void test1 ; // no warning, even though b isn't abstract and declares an abstract method } class c extends b { } // no warning, but this is where i would really want one void main { new c .test1 ; // calls a.test1 instead of failing because b.test1 has no implementation }