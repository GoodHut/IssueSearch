 URL : "https://github.com/gcanti/io-ts/issues/50" TITLE : tagged union of types BODY : i really love this library and was hoping to be able to write something similar to haskell's generic functions. but to leverage totality checking i need to be able to form some kind of tagged union of the types in this package. but i'm having some trouble. i basically want something like this, where i can pass a type object and a map of folds to handle each type of type to build database schemas and stuff from the type definition. any help would be greatly appreciated. type types<a = any, b extends props = {}, c extends any = any , d = any> = | type<a> | interfacetype<b> | uniontype<c, d> function genericfold<a = any, b extends props = {}, c extends any = any , d = any> x : types<a, b, c, d>, f: any { if x instanceof uniontype { // do something if x.t instanceof type genericfold x.t ; } else if x instanceof interfacetype { } else if x instanceof type { } else { return assertnever x ; } }