 URL : "https://github.com/SimonDanisch/MakiE.jl/issues/8" TITLE : transition to plots.jl BODY : considering that makie is designed quite differently from plots.jl, any transition to plots.jl will basically mean replacing plots.jl. i don't see how to slowly incorporate ideas from makie into plots.jl without a huge amount of work. i think we're at a good time to still make drastic much needed changes, so we shouldn't try to be conservative here. so i propose to let makie live as it's own package for a while until we can ensure, that all features from plots.jl are well covered. then we can think about renaming makie, make a pr to plots.jl to replace the internals with makie or simply deprecate plots.jl and suggest to move to makie. this would look something like this: 1 pre release makie should happen today 2 implement some more high level recipes from plots.jl 3 introduce a compatibility layer for plotsrecipebase to see if makie support the whole range of features used in packages 4 factor out makie plotsbase https://github.com/simondanisch/makie.jl/tree/master/src/plotsbase into an abstract plotting package with no dependencies 5 create backend packages 6 refactor into packages - replace/rename plots.jl with new internals other backends i'm inclined to implement a reference backend different from glvisualize with cairo. i already have some code for this from my experiments in visualize.jl. cairo is completely orthogonal to glvisualize and offers missing bits and pieces like pdf/svg export. the orthogonality seems to be an important quality for different backends to make the choice of backends clearer to the user. since gr is the favorite plots.jl backend, it would also make sense to start with gr as a reference implementation. it's less orthogonal and i'm not as familiar with the api, though. but if @jheinen is on board and willing to help me out, this could also be a great start! cc: @daschw @mkborregaard @piever @chrisrackauckas @evizero @viralbshah