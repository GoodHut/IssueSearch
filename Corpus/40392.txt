 URL : "https://github.com/JuliaLang/julia/issues/20305" TITLE : type inference error BODY : pycall test is causing a sigill due to what seems to be a type inference/type computation error. reduced case: julia data = ptr{float16} libc.malloc 1000 dims = 6, 1 function copy2 data b = unsafe_wrap array, data, dims::tuple return transpose b end @code_warntype copy2 data copy2 data the inferred code is julia variables: self :: copy2 data::ptr{float16} b::union{array{float16,n},array{float16,n}} temp ::core.methodinstance body: begin b::union{array{float16,n},array{float16,n}} = main.unsafe_wrap main.array,data::ptr{float16}, core.typeassert main.dims,main.tuple ::tuple ::union{array{float16,n},array{float16,n}} line 7: return main.transpose b::union{array{float16,n},array{float16,n}} ::union{} end::union{} the inferred type of b looks weird and the inferred type of transpose is wrong. maybe it's related to failing to normalize these types? julia julia> union{array{float16,n},array{float16,n}} where n union{array{float16,n},array{float16,n}} where n julia> union{array{float16,n1},array{float16,n2}} where n1 where n2 union{array{float16,n1},array{float16,n2}} where n1 where n2 @jeffbezanson