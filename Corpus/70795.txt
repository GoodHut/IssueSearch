 URL : "https://github.com/chapel-lang/chapel/issues/5787" TITLE : ~ on bools is confusing BODY : chapel var t:bool 16 = true; var f:bool 16 = false; proc returncomplement arg { return ~arg; } writeln returncomplement t ; writeln returncomplement f ; currently prints out true true when one might expect it to print out false true related tests: types/scalar/bradc/bitnegatebool types/scalar/bradc/bools2 some discussion on this topic revealed these options: 1 make bitwise operations on bool types including | & ~ result in compilation error. programmers shouldn't be thinking of bools in terms of bit patterns / it's not what the bitwise operators are for can lead to confusion if the element type ever changes to integer could be confusing if coercion is involved 2 make bitwise operations on bool types operate with 1-bit at a time; so ~ is equivalent to ! and the and and or operators are equivalent to the logical versions, but without short circuiting. arguably supports generic programming these operations on bool values are unambiguous, so why not support them traditionally, in c-like languages, | and & are available as non-short-circuiting equivalents to || and && . if chapel users care about this distinction, they might like to have both. related question: should it be possible to apply || && or ! to integral types?